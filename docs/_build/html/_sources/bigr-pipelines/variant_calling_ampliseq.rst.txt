.. _`Variant_Calling_Ampliseq`:

VARIANT_CALLING_AMPLISEQ
========================

Perform Variant calling on Ampliseq

Usage
-----

In order to run the pipeline, use the following commands

.. code-block:: bash 

  # Go to your working directory

  cd /path/to/my/working/directory

  # Build a design file (see below)

  # Copy/paste the following line for **HG19**

  bash /mnt/beegfs/pipelines/snakemake-wrappers/bigr_pipelines/variant_calling_ampliseq/run.sh

  # Copy/paste the following line for **HG38**

  bash /mnt/beegfs/pipelines/snakemake-wrappers/bigr_pipelines/variant_calling_ampliseq/run.sh hg38


Input/Output
------------


**Input:**

 
  
* VCF files
  
 
  
* Cosmic database formatted as gzipped vcf and its tbi index (already provided for IGR Flamingo users)
  
 
  
* dbSNP database formatted as gzipped vcf and its tbi index (already provided for IGR Flamingo users)
  
 
  
* MSigDB database formatted as GMT (already provided for IGR Flamingo users)
  
 
  
* GWASCatalog database formatted as TSV (already provided for IGR Flamingo users)
  
 
  
* Kaviar database formatted as gzipped vcf and its tbi index (already provided for IGR Flamingo users)
  
 
  
* SnpEff database downloaded with SnpEff itself (already provided for IGR Flamingo users)
  
 
  
* CaptureKit genomic intervals formatted as BED (already provided for IGR Flamingo users)
  
 
  
* Known variants from dbSNP, with only AF within the INFO field for GATK (already provided for IGR Flamingo users)
  
 
  
* dbNSFP database formatted as TSV (already provided for IGR Flamingo users)
  
 
  
* FastQ Screen databases (already provided for IGR Flamingo users)
  
 


**Output:**

 
  
* Annotated VCF files
  
 
  
* MultiQC Report
  
 





Used meta-wrappers
------------------

The following individual meta-wrappers are used in this pipeline:


* :ref:`meta/bio/bwa_fixmate`

* :ref:`meta/bio/gatk_bqsr`

* :ref:`meta/bio/varscan2_calling`

* :ref:`bigr_pipelines/snpeff_snpsift`


Please refer to each meta-wrapper in above list for additional configuration parameters and information about the executed code.




Used wrappers
-------------

The following individual wrappers are used in this pipeline:


* :ref:`bio/bigr/copy`

* :ref:`bio/fastp`

* :ref:`bio/compress/pbgzip`

* :ref:`bio/tabix`

* :ref:`bio/multiqc`

* :ref:`bio/picard/collectalignmentsummarymetrics`

* :ref:`bio/fastq_screen`


Please refer to each wrapper in above list for additional configuration parameters and information about the executed code.




Notes
-----

Prerequisites:

* A TSV formatted design file, *named 'design.tsv'* with the following columns:

.. list-table:: Desgin file format
  :widths: 33 33 33
  :header-rows: 1

  * - Sample_id
    - Upstream_fastq
    - Downstream_fastq
  * - Name of the Sample1
    - Path to upstream fastq file
    - Path to downstream fastq file
  * - Name of the Sample2
    - Path to upstream fastq file
    - Path to downstream fastq file
  * - ...
    - ...
    - ...





Snakefile
---------

The pipeline contains the following steps:

.. code-block:: python

    import logging
    import os
    import pandas
    import sys
    from pathlib import Path

    worflow_source_dir = Path(snakemake.workflow.srcdir("."))
    common = str(worflow_source_dir / ".." / "common" / "python")
    sys.path.append(common)

    from file_manager import *
    from files_linker import *
    from write_yaml import *
    from messages import *
    from snakemake.utils import min_version
    min_version("6.0")

    logging.basicConfig(
        filename="snakemake.variant_calling_ampliseq.log",
        filemode="w",
        level=logging.DEBUG
    )

    container: "docker://continuumio/miniconda3:4.4.10"
    localrules: bigr_copy_fq
    ruleorder: bwa_mem > bwa_fixmate_meta_bwa_mem


    default_config = read_yaml(worflow_source_dir / "config.hg38.yaml")
    configfile: get_config(default_config)
    design = get_design(os.getcwd(), search_fastq_pairs)


    wildcard_constraints:
        sample = r"|".join(design["Sample_id"]),
        stream = r"1|2|R1|R2"


    fastq_links = link_fq(
        design.Sample_id,
        design.Upstream_file,
        design.Downstream_file
    )

    rule target_ampliseq:
        input:
            calls=expand(
                "snpsift/fixed/{sample}.vcf.gz{index}",
                sample=design["Sample_id"].tolist(),
                index=["", ".tbi"]
            ),
            html="multiqc/variant_calling_ampliseq.html"
        message:
            "Finishing the Ampliseq variant calling"


    #################
    ### Gather QC ###
    #################


    # Already imported below
    # See rules/001.QC_Trimming.smk


    #################################
    ### FINAL VCF FILE INDEXATION ###
    #################################

    module compress_index_vcf_meta:
        snakefile: "../../meta/bio/compress_index_vcf/test/Snakefile"
        config: config

    use rule * from compress_index_vcf_meta

    ######################
    ### VCF annotation ###
    ######################


    rule annotate_vcf:
        input:
            design="design.tsv",
            config="config.yaml",
            calls=expand(
                "bcftools/annotate/{sample}.vcf.gz",
                sample=design["Sample_id"]
            ),
            calls_index=expand(
                get_tbi("bcftools/annotate/{sample}.vcf.gz"),
                sample=design["Sample_id"]
            ),
        output:
            calls=temp(expand(
                "snpsift/fixed/{sample}.vcf.gz",
                sample=design["Sample_id"]
            )),
            calls_index=temp(expand(
                "snpsift/fixed/{sample}.vcf.gz.tbi",
                sample=design["Sample_id"]
            )),
            table=temp(expand(
                "snpsift/extractFields/{sample}.tsv",
                sample=design["Sample_id"]
            )),
            html="snpeff_snpsift/multiqc/SnpEff_annotation.html",
            html_data=directory("snpeff_snpsift/multiqc/SnpEff_annotation_data")
        message:
            "Annotating VCF"
        threads: 2
        resources:
            mem_mb=lambda wildcards, attempt: attempt * 1024 * 5,
            time_min=lambda wildcards, attempt: attempt * 60 * 10,
            tmpdir="tmp"
        handover: True
        log:
            "logs/snpeff_snpsift_pipeline.log"
        params:
            mkdir="--parents --verbose",
            ln="--symbolic --force --relative --verbose",
            variant_dir="mutect2/corrected/",
            outdir="snpeff_snpsift",
            pipeline_path=config.get(
                "snpeff_snpsift_run_path",
                "/mnt/beegfs/pipelines/snakemake-wrappers/bigr_pipelines/snpeff_snpsift/run.sh"
           ),
            organism = config["params"].get("organism", "hg38")
        shell:
            "mkdir {params.mkdir} {params.outdir}/data_input/calls/ > {log} 2>&1 && "
            "ln {params.ln} {input.config} {params.outdir} >> {log} 2>&1 && "
            "ln {params.ln} {params.variant_dir}/* {params.outdir}/data_input/calls/ >> {log} 2>&1 && "
            "cd {params.outdir} && "
            "bash {params.pipeline_path} {params.organism} | tee -a ${{OLDPWD}}/{log} 2>&1"
            "ln {params.ln} snpsift/ ${{OLDPWD}}/snpsift >> {log} 2>&1 && "
            "ln {params.ln} snpeff/ ${{OLDPWD}}/snpsift >> {log} 2>&1 "


    ###############################
    ### Region depth annotation ###
    ###############################


    include: "rules/007.region.depth.smk"


    #####################################
    ### Merge variant calling results ###
    #####################################

    include: "rules/006.metacaller.smk"


    ###############################
    ### Variant calling Mutect2 ###
    ###############################


    include: "rules/005.mutect2.smk"


    ################################
    ### Variant Calling Varscan2 ###
    ################################


    include: "rules/004.varscan.call.smk"


    ##############################
    ### GATK BAM RECALIBRATION ###
    ##############################


    include: "rules/003.recalibration.smk"


    ########################################
    ### BWA MAPPING                      ###
    ### Samtools fixmate                 ###
    ### Samtools filter over capture kit ###
    ### Samtools indexation              ###
    ########################################


    include: "rules/002.mapping.smk"


    ############################
    ### FASTP FASTQ CLEANING ###
    ############################


    include: "rules/001.QC_Trimming.smk"


    #################################################
    ### Gather files from iRODS or mounting point ###
    #################################################

    include: "rules/000.bigr_copy.smk"




Authors
-------


* Thibault Dayris

* M boyba Diop

* Marc Deloger

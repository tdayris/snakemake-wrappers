.. _`coverage_variant_region`:

COVERAGE_VARIANT_REGION
=======================

Compute coverage around variants and annotate VCF with this information.


Example
-------

This meta-wrapper can be used by integrating the following into your workflow:

.. code-block:: python

    default_config_vcr = {
        "bed": "/path/to/capture_kit.bed",
        "organism": "GRCh38",
        "bin_size": 1,
        "threads": 10
    }


    # Compute genome coverage
    rule genome_coverage_bam:
        input:
            bam = "samtools/filter/{sample}.bam"
        output:
            coverage = temp("deeptools/bamcoverage/{sample}.bedgraph")
        message:
            "Computing {wildcards.sample} coverage"
        threads: config.get("threads", 10)
        resources:
            mem_mb=lambda wildcards, attempt: attempt * 1024 * 3,
            time_min=lambda wildcards, attempt: attempt * 35,
            tmpdir="tmp"
        log:
            "logs/deeptools/bamcoverage/{sample}.log"
        params:
            extra = f'--binSize {config.get("bin_size", "10")}'
        wrapper:
            "bio/deeptools/bamcoverage"


    # Divide number of read per bin size to get the mean coverage
    rule compute_mean_coverage:
        input:
            "deeptools/bamcoverage/{sample}.bedgraph"
        output:
            temp("deeptools/bamcoverage/{sample}.meandepth.tsv")
        threads: 1
        resources:
            mem_mb=lambda wildcards, attempt: attempt * 1024,
            time_min=lambda wildcards, attempt: attempt * 15,
            tmpdir="tmp"
        log:
            "logs/awk/meandepth/{sample}.log"
        params:
            begin = 'FS=OFS="\t"',
            body = [f'print $1 FS $2+1 FS $3+1 FS $4/{config.get("bin_size", "10")}']
        wrapper:
            "bio/awk"


    # Build new header that is to be added in final VCF
    rule create_info_table:
        output:
            temp("bcftools/annotate/info.txt")
        message:
            "Building VCF header for bcftools annotate"
        threads: 1
        resources:
            mem_mb=lambda wildcards, attempt: attempt * 512,
            time_min=2,
            tmpdir="tmp"
        log:
            "logs/bcftools/annotate/header.log"
        params:
            header=f'##INFO=<ID=MEAN_REGION_COVERAGE,Number=1,Type=Float,Description=\"Mean coverage over a bin of {config.get("bin_size", "10")}\">'
        shell:
            'echo "{params.header}" > {output} 2> {log}'


    # Annotate VCF with mean region coverage
    rule bcftools_annotate:
        input:
            calls="meta_caller/calls/{sample}.vcf.gz",
            calls_index="meta_caller/calls/{sample}.vcf.gz.tbi",
            annotation="deeptools/bamcoverage/{sample}.meandepth.tsv",
            info="bcftools/annotate/info.txt"
        output:
            temp("bcftools/annotate/{sample}.vcf")
        message:
            "Adding region depth information on {wildcards.sample}"
        threads: 2
        resources:
            mem_mb=lambda wildcards, attempt: attempt * 1024 * 4,
            time_min=lambda wildcards, attempt: attempt * 30,
            tmpdir="tmp"
        log:
            "logs/bcftools/annotate/{sample}.log"
        params:
            extra="--columns CHROM,FROM,TO,MEAN_REGION_COVERAGE"
        wrapper:
            "bio/bcftools/annotate"

Note that input, output and log file paths can be chosen freely, as long as the dependencies between the rules remain as listed here.
For additional parameters in each individual wrapper, please refer to their corresponding documentation (see links below).

When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.



Used wrappers
---------------------

The following individual wrappers are used in this meta-wrapper:


* :ref:`bio/deeptools/bamcoverage`

* :ref:`bio/awk`

* :ref:`bio/bcftools/annotate`


Please refer to each wrapper in above list for additional configuration parameters and information about the executed code.






Notes
-----

The "bin_size" parameter is used to get the window size to compute coverage around a given variant.




Authors
-------


* Thibault Dayris


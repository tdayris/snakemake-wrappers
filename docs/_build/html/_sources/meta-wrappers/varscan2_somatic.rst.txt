.. _`varscan2_somatic`:

VARSCAN2_SOMATIC
================

Call variants on BAM files with Varscan2, considering a normal background and a tumor state.


Example
-------

This meta-wrapper can be used by integrating the following into your workflow:

.. code-block:: python

    import sys
    from pathlib import Path

    worflow_source_dir = Path(next(iter(workflow.get_sources()))).absolute().parent
    common = str(worflow_source_dir / "../../../../bigr_pipelines/common/python")
    sys.path.append(common)

    from file_manager import *

    default_config_varscan2_somatic = {
        # Your genome sequence
        "genome": "reference/genome.fasta",
        # Path to a BED containing the kit's catpured regions
        "bed": "reference/regions.bed",
        # Extra parameters
        "mpileup_extra": "--count-orphans --no-BAQ",
        "varscan_somatic_extra": "--somatic-p-value 0.1 --variants --output-type g",
        "varscan_bcftools_concat_extra": "--remove-duplicates --allow-overlaps"
    }

    try:
        if config == dict():
            config = default_config_varscan2_somatic
    except NameError:
        config = default_config_varscan2_somatic


    ## Required modules :
    ## This module includes fasta indexes and fasta dictionnaries
    # module index_datasets:
    #     snakefile: "../../index_datasets/test/Snakefile"
    #     config: config
    #
    # use rule * from index_datasets as index_datasets_*

    ## This module includes GATK recalibration
    # module gatk_bqsr:
    #     snakefile: "../../gatk_bqsr/test/Snakefile"
    #     config: config
    #
    # use rule * from gatk_bqsr as gatk_bqsr_*

    ## This module includes BWA mapping and Samtools corrections
    # module bwa_fixmate:
    #     snakefile: "../../bwa_fixmate/test/Snakefile"
    #     config: config
    #
    # use rule * from bwa_fixmate as bwa_fixmate_*

    ##################################
    ### Correct multiallelic sites ###
    ##################################

    rule split_multiallelic_varscan2:
        input:
            call="varscan2/concat/{sample}.vcf.gz",
            idx=get_tbi("varscan2/concat/{sample}.vcf.gz"),
            fasta=config["genome"]
        output:
            temp("bcftools/varscan2/{sample}.vcf.gz")
        message:
            "Splitting Mutect2 multiallelic sites {wildcards.sample}"
        threads: 1
        resources:
            mem_mb=lambda wildcards, attempt: min(attempt * 5120, 15360),
            time_min=lambda wildcards, attempt: attempt * 35,
            tmpdir="tmp"
        params:
            extra = "-m -both --check-ref w"
        log:
            "logs/bcftools/norm/mutect2/{sample}.log"
        wrapper:
            "bio/bcftools/norm"


    ####################################
    ### Complete and correct headers ###
    ####################################

    """
    This rule renames samples for further merges. It also adds chromosome
    information and filters on provided regions
    """
    rule bcftools_reheader:
        input:
            vcf=(
                "varscan2/concat/{sample}.vcf.gz"
                if config.get("indel", False) is False
                else "varscan2/somatic/{sample}.snp.vcf"
            ),
            vcf_tbi=get_tbi(
                "varscan2/concat/{sample}.vcf.gz"
                if config.get("indel", False) is False
                else "varscan2/somatic/{sample}.snp.vcf"
            ),
            #samples="varscan2/mpileup2cns/{sample}.sample.list",
            fasta=config["genome"],
            fai=get_fai(config["genome"]),
            regions=config["bed"]
        output:
            temp("varscan2/reheaded/{sample}.vcf.gz")
        message:
            "Reheading {wildcards.sample} with fasta index and new sample names"
        threads: 2
        resources:
            mem_mb=lambda wildcards, attempt: attempt * 1024,
            time_min=lambda wildcards, attempt: attempt * 25,
            tmpdir="tmp"
        log:
            "logs/bcftools/reheader/varscan2/{sample}.log"
        params:
            extra="",
            view_extra=""
        wrapper:
            "bio/bcftools/reheader"


    """
    This rule provides a list of sample names (here, only one) for Varscan2
    """
    rule varscan2_sample_list:
        output:
            temp("varscan2/mpileup2cns/{sample}.sample.list")
        message:
            "Building sample list for Varscan2 mpileup2cns"
        threads: 1
        resources:
            mem_mb=lambda wildcards, attempt: 1024 * 10 * attempt,
            time_min=2
        params:
            '"varscan2_{sample}_tumor\nvarscan2_{sample}_normal"'
        log:
            "logs/varscan2/samples/{sample}.list.log"
        shell:
            "echo -e {params} > {output} 2> {log}"


    """
    This rule concats snp and indel callings from Varscan2 in order to produce a
    full VCF file with both kind of variations.
    """
    rule bcftools_concat:
        input:
            calls=expand(
                "varscan2/somatic/{sample}.{content}.vcf.gz",
                content=["snp", "indel"],
                allow_missing=True
            ),
            calls_index=expand(
                "varscan2/somatic/{sample}.{content}.vcf.gz.tbi",
                content=["snp", "indel"],
                allow_missing=True
            )
        output:
            temp("varscan2/concat/{sample}.vcf.gz")
        message:
            "Concatenating varscan calling for {wildcards.sample}"
        threads: 2
        resources:
            mem_mb=lambda wildcards, attempt: min(attempt * 1025, 4096),
            time_min=lambda wildcards, attempt: attempt * 45,
            tmpdir="tmp"
        params:
            extra=config.get(
                "bcftools_concat_extra",
                "--remove-duplicates --allow-overlaps"
            )
        log:
            "logs/bcftools/concat/{sample}.log"
        wrapper:
            "bio/bcftools/concat"

    #######################
    ### Variant Calling ###
    #######################

    """
    This rule performs germline calling with Varscan2
    """
    rule varscan2_somatic:
        input:
            mpileup="samtools/mpileup/{sample}.mpileup.gz"
        output:
            snp=temp("varscan2/somatic/{sample}.snp.vcf"),
            indel=temp("varscan2/somatic/{sample}.indel.vcf")
        message:
            "Calling variants on {wildcards.sample} with Varscan2 mpileup2cns"
        threads: 2
        resources:
            mem_mb=lambda wildcards, attempt: min(attempt * 8192, 20480),
            time_min=lambda wildcards, attempt: attempt * 45,
            tmpdir="tmp"
        params:
            extra=config.get(
                "varscan_somatic_extra",
                "--somatic-p-value 0.2 --variants --output-type g"
            )
        log:
            "logs/varscan2/somatic/{sample}.call.log"
        wrapper:
            "bio/varscan/somatic"


    """
    This rule runs samtools mpileup to list each single difference between mapped
    reads and reference genome
    """
    rule samtools_mpilup:
        input:
            bam=[
                "sambamba/markdup/{sample}_tumor.bam",
                "sambamba/markdup/{sample}_normal.bam"
            ],
            bam_index=[
                get_bai("sambamba/markdup/{sample}_tumor.bam"),
                get_bai("sambamba/markdup/{sample}_normal.bam")
            ],
            reference_genome=config["genome"],
            reference_genome_idx=get_fai(config["genome"]),
            bed=config["bed"]
        output:
            temp("samtools/mpileup/{sample}.mpileup.gz")
        message:
            "Building mpilup on {wildcards.sample} with samtools (tumor/normal)"
        threads: 2
        resources:
            mem_mb=lambda wildcards, attempt: min(attempt * 4096, 20480),
            time_min=lambda wildcards, attempt: attempt * 120,
            tmpdir="tmp"
        log:
            "logs/samtools/mpileup/{sample}.log"
        params:
            extra=config.get("mpileup_extra", "--count-orphans --no-BAQ")
        wrapper:
            "bio/samtools/mpileup"

Note that input, output and log file paths can be chosen freely, as long as the dependencies between the rules remain as listed here.
For additional parameters in each individual wrapper, please refer to their corresponding documentation (see links below).

When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.



Used wrappers
---------------------

The following individual wrappers are used in this meta-wrapper:


* :ref:`bio/bcftools/concat`

* :ref:`bio/varscan/somatic`

* :ref:`bio/samtools/mpileup`


Please refer to each wrapper in above list for additional configuration parameters and information about the executed code.






Notes
-----

Bam are expected to be mate-fixed (see bwa_fixmate meta-wrapper), and recalibrated (see gatk_bqsr meta-wrapper).




Authors
-------


* Thibault Dayris


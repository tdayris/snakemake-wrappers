.. _`bio/SomaticSignatures/plotMutationSpectrum`:

PLOTMUTATIONSPECTRUM
====================

Plot Mutational spectrum

**URL**: 

Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule test_SomaticSignatures_plotMutationSpectrum:
        input:
            context = "context.rds"
        output:
            png = "plot.png"
        params:
            extra = "group = 'sampleNames'"
        wrapper:
            "0.50.4-2418-g8fefa1e53/bio/SomaticSignatures/plotMutationSpectrum"

Note that input, output and log file paths can be chosen freely.

When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``bioconda:bioconductor-somaticsignatures=2.24.0``
* ``conda-forge:r-nmf=0.21.0``

Input/Output
------------
**Input:**

* A RDS-formatted mutational context

**Output:**

* PNG image of the mutational spectrum




Notes
-----

See VariantAnnotation, Rsamtools, and SomaticSignatures wrappers
for input requirements.



Authors
-------

* authors


Code
----

.. code-block:: R

    #!/usr/bin/R

    # Plot mutational spectrum
    library(package = "SomaticSignatures", quietly=TRUE);


    contexts <- base::readRDS(
      file = base::as.character(
        x = snakemake@input[['context']]
      )
    );

    extra <- "contexts";
    if ("extra" %in% names(snakemake@params)) {
      extra <- base::paste(
        extra,
        base::as.character(x = snakemake@params[["extra"]]),
        sep = ", "
      );
    }

    command <- paste0(
      "SomaticSignatures::plotMutationSpectrum(",
      extra,
      ")"
    );
    print(command);


    png(
      filename = snakemake@output[["png"]],
      width = 1024,
      height = 768,
      units = "px",
      type = "cairo"
    );

    base::eval(
      base::parse(
        text = command
      )
    );

    dev.off();


.. |nl| raw:: html

   <br>
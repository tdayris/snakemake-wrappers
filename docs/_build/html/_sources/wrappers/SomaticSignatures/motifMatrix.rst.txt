.. _`bio/SomaticSignatures/motifMatrix`:

MOTIFMATRIX
===========

Build a motif matrix from VRanges object

**URL**: 

Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule test_SomaticSignatures_motifMatrix:
        input:
            context = "context.rds"
        output:
            rds = "motifs.rds",
            tsv = "motifs.tsv"
        params:
            extra = "group = 'sampleNames'"
        wrapper:
            "0.50.4-2418-g8fefa1e53/bio/SomaticSignatures/motifMatrix"

Note that input, output and log file paths can be chosen freely.

When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``bioconda:bioconductor-somaticsignatures=2.24.0``
* ``conda-forge:r-nmf=0.21.0``

Input/Output
------------
**Input:**

* RDS formatted VRange object

**Output:**

* RDS formatted motifMatrix
* TSV formatted motifMatrix




Notes
-----

Output are optional



Authors
-------

* Thibault Dayris


Code
----

.. code-block:: R

    #!/usr/bin/R

    # Build mutation motif matrix from a VRange-formatted calling
    library(package = "SomaticSignatures", quietly=TRUE);

    # Loading input dataset
    mutations <- base::readRDS(
      file = base::as.character(
        x = snakemake@input[['context']]
      )
    );

    # Building command line
    extra <- "vr = mutations";
    if ("extra" %in% names(snakemake@params)) {
      extra <- base::paste(
        extra,
        snakemake@params[["extra"]],
        sep = ", "
      );
    }

    command <- base::paste0(
      "SomaticSignatures::motifMatrix(", extra, ")"
    );
    print(command)

    # Building motif matrix
    motifs <- base::eval(
      base::parse(
        text = command
      )
    );

    # Save results
    if ("rds" %in% names(snakemake@output)) {
      base::saveRDS(
        object = motifs,
        file = base::as.character(x = snakemake@output[["rds"]])
      );
    }

    if ("tsv" %in% names(snakemake@output)) {
      motifs <- base::as.data.frame(motifs);
      utils::write.table(
        x = motifs,
        file = snakemake@output[["tsv"]],
        quote = FALSE,
        sep = "\t",
        row.names = TRUE
      );
    }


.. |nl| raw:: html

   <br>
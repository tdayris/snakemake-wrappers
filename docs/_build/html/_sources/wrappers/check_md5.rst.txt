.. _`bio/check_md5`:

CHECK MD5
=========

Verify MD5 validity bewteen a provided file and a provided hash

**URL**: 

Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule test_check_md5_with_expected_hash_as_file:
        input:
            file = "test.txt",
            hash = "expected.md5"
        output:
            "test.md5"
        wrapper:
            "0.50.4-2418-g8fefa1e53/bio/check_md5"

Note that input, output and log file paths can be chosen freely.

When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``conda-forge:bash=5.0.011``

Input/Output
------------
**Input:**

* A file to hash
* An optional file that contains expected hash value

**Output:**

* A file containing both obtained and expected hash value and its correctness




Notes
-----

If no expected-hash file is provided, then the hash value should be passed as
a parameter: hash_value



Authors
-------

* Thibault Dayris


Code
----

.. code-block:: python

    #!/usr/bin/python3.7
    # -*- coding: utf-8 -*-

    """Snakemake wrapper md5sum checking"""

    __author__ = "Thibault Dayris"
    __copyright__ = "Copyright 2019, Thibault Dayris"
    __email__ = "thibault.dayris@gustaveroussy.fr"
    __license__ = "MIT"

    from snakemake.shell import shell
    log = snakemake.log_fmt_shell(stdout=False, stderr=True)


    def read_md5(file_path: str) -> str:
        """
        Read a MD5sum output file and return the hash value
        """
        with open(file_path) as hashfile:
            hash_value, *_ = next(hashfile).split(" ")

        return hash_value


    expected = ""
    if snakemake.params.get("hash_value", None) is not None:
        expected = snakemake.params["hash_value"]
    elif "hash" in snakemake.input.keys():
        expected = read_md5(snakemake.input["hash"])
    else:
        raise ValueError(
            "Could not determine expected hash value for MD5 comparison"
        )

    shell("md5sum {snakemake.input.file} > {snakemake.output} {log}")

    obtained = read_md5(snakemake.output[0])

    if not expected == obtained:
        raise ValueError(
            "MD5 hash was not the expected one: "
            "got {}, expected {}".format(obtained, expected)
        )


.. |nl| raw:: html

   <br>
.. _`bio/BiGR/multiqc_rnaseq_report`:

MULTIQC_RNASEQ_REPORT
=====================

Build a result report for RNASeq analysis

**URL**: 

Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule multiqc_config:
        input:
             pairwise_scatterplot = "image.png",
             clustermap_sample = "image.png",
             pca_plot = "image.png",
             pca_axes_correlation = "image.png",
        output:
            multiqc_config = "multiqc_config.yaml",
            plots = [
                temp("pairwise_scatterplot_mqc.png"),
                temp("clustermap_sample_mqc.png"),
                temp("pca_plot_mqc.png"),
                temp("pca_axes_correlation_mqc.png")
            ]
        log:
            "logs/multiqc/config.log"
        params:
            title = "My title",
            subtitle = "My subtitle that catches readers",
            intro_text = "Intro text that summs up may things",
            report_comment = "A comment about this report",
            show_analysis_paths = False,
            show_analysis_time = True,
            custom_logo = '../IGR_Logo.jpeg',
            custom_logo_url = 'https://gitlab.com/bioinfo_gustaveroussy/bigr',
            custom_logo_title = 'BiGR, Gustave Roussy Intitute',
            report_header_info = [
                {"Contact E-mail": "my_address@gustaveroussy.fr"},
                {"Application Type": "RNA-seq"},
                {"Project Type": "Application"},
                {"Sequencing Platform": "HiSeq 2500 High Output V4"},
                {"Sequencing Setup": "2x125"}
            ]
        wrapper:
            "0.50.4-2418-g8fefa1e53/bio/BiGR/multiqc_rnaseq_report"

Note that input, output and log file paths can be chosen freely.

When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``bioconda::multiqc==1.9``
* ``conda-forge::python==3.9.5``
* ``conda-forge::pandas==1.2.5``

Input/Output
------------
**Input:**

* ``clustermap_sample``: Optional clustered heatmap of all samples
* ``clustermap_genes``: Optional clustered heatmap of DEG
* ``pca_axes_correlation``: Optional barplot of the correlation between samples and experimental design factors.
* ``pairwise_scatterplot``: Optional pairwise scatterplot
* ``pca_plot``: Optional PCA
* ``volcanoplot``: Optional volcano plot
* ``distro_expr``: Optional distribution of genes expression per sample
* ``ma_plot``: Optional MA-Plot
* ``consensus_cluster_plus``: Optional consensus_cluster_plus result
* ``titv_plot``: Optional Ti/Tv plot from maftools
* ``maf_summary``: Optional maf summary
* ``oncoplot``: Optional oncoplot

**Output:**

* ``multiqc_config``: Path to a yaml file that holds MultiQC config
* ``plots``: A list of graphs depending on the input files



Params
------

* ``title``: Optional report title

* ``subtitle``: Optional report subtitle

* ``intro_text``: Optional intro text,

* ``report_comment``: Optional comment,

* ``show_analysis_paths``: Boolean. Display (default) or hide results paths on the computing machine.,

* ``show_analysis_time``: Boolean. Display (default) or hide computation times.

* ``custom_logo``: Optional path to a PNG logo,

* ``custom_logo_url``: Optional path to a web page,

* ``custom_logo_title``: Optional text as a replacement of the logo.,

* ``report_header_info``: [{'Contact E-mail': 'An optional email address'}, {'Application Type': 'Optional type of analysis'}, {'Project Type': 'Optional kind of analysed project'}, {'Sequencing Platform': 'Optional info towards the sequencing platform'}, {'Sequencing Setup': 'Optional info about the sequencing kit/method'}]





Authors
-------

* Thibault Dayris


Code
----

.. code-block:: python

    #!/usr/bin/python3.8
    # -*- coding: utf-8 -*-

    """
    From the given files, produce specific MultiQC yaml files that witll ship
    content info MultiQC automatically
    """

    import yaml

    from shutil import copyfile
    from pathlib import Path
    from snakemake.shell import shell
    from typing import Any, Dict
    import logging

    # Snakemake loggings
    log = snakemake.log_fmt_shell(stdout=True, stderr=True, append=True)

    # Python loggings
    logging.basicConfig(
        filename=snakemake.log[0],
        filemode="w",
        level=logging.DEBUG
    )


    section_dict = {
        "clustermap_sample": {
            "section": "Clustermap_Sample",
            "title": "Sample clustered heatmap",
            "description": (
                "Per sample clustered heatmap. This plot has been build based on "
                "normalized counts from DESeq2.<br><br>Colors run from red "
                "(identical) to blue (different). Samples are named using the "
                "following scheme: condition - sample_id (powered by in-house "
                "python scripts: pandas, seaborn and scipy)"
            ),
            "plot_name": "clustermap_sample_mqc.png"
        },
        "clustermap_genes": {
            "section": "Clustermap_Genes",
            "title": "Heatmap of samples clustered over genes",
            "description": (
                "Per genes clustered heatmap. This plot has been build based on "
                "filtered normalized counts from DESeq2.<br><br>Colors run from red"
                " (identical) to blue (different). Samples are named using the "
                "following scheme: condition - sample_id. (powered by in-house "
                "python scripts: pandas, seaborn and scipy)"
            ),
            "plot_name": "clustermap_gene_mqc.png"
        },
        "PCA_axes_correlation": {
            "section": "PCA_axes_correlation",
            "title": "PCA Axes correlations",
            "description": (
                "This histogram shows which factor has a higher  correlation with "
                "the first axe of the PCA. This may help to understand why a DGE "
                "returns odd results, or which factor masks another.<br><br>"
                "This does not foresee anything for the upcomming differential "
                "analysis. (powered by pcaExplorer)"
            ),
            "plot_name": "pca_axes_correlation_mqc.png"
        },
        "Pairwise_Scatterplot": {
            "section": "Pairwise_Scatterplot",
            "title": "Pairwise Scatterplot",
            "description": (
                "This is a pairwise scatterplot. It contains: (1) in diagonal: the "
                "sample names, (2) in upper half the pearson correlation between "
                "samples, (3) in lower half, the scatterplot of each genic feature "
                "against each other. <br><br>A value of 0.95 and above shows high "
                "similarities like ones observed in cell lines. A value between "
                "0.95 and 0.80 shows average similarities. A lesser value shows "
                "noticable dissimilarities."
            ),
            "plot_name": "pairwise_scatterplot_mqc.png"
        },
        "pca_plot": {
            "section": "PCA_Plot",
            "title": "Principal Component Analysis",
            "description": (
                "Principal Component Analysis (PCA) is a common method to display "
                "samples similarities and divergences.<br><br> Each point represents "
                "a sample. Two points that are close from each others, are similar to "
                "each others. Two points, that are apart from each others, are "
                "different. (powered by pcaExplorer)"
            ),
            "plot_name": "pca_plot_mqc.png"
        },
        "volcanoplot": {
            "section": "Volcano_Plot",
            "title": "Volcano Plot",
            "description": (
                "The volcanoplot shows the repartition of genes across two "
                "dimensions: their log2(Fold Change) and the -log10(Adjusted PValue)"
                "<br><br>Each point is a gene. The higher the point, the greater "
                "is the confidence we have in the fact that it is differentially "
                "expressed according to our factor of interest. The more apart a "
                "point is from the center of the graph, the more differentially "
                "expressed it is. (powered by EnhancedVolcano)"
            ),
            "plot_name": "volcanoplot_mqc.png"
        },
        "distro_expr": {
            "section": "Expression_Distribution",
            "title": "Expression Distribution",
            "description": (
                "The distribution of normalised genes expression is a common quality "
                "control performed over a differential gene analysis. <br><br> We "
                "expect all samples to have similar distribution, otherwise, it would"
                " sign a possible error before the end of the normalization process."
            ),
            "plot_name": "distro_expr_mqc.png"
        },
        "distro_mu": {
            "section": "Mu_Distribution",
            "title": "µ(ij) Distribution",
            "description": (
                "The distribution of gene's µ(ij) in DESeq2 is a common quality "
                "control performed over a differential gene analysis. <br><br> We "
                "expect all samples to have similar distribution, otherwise, it would"
                " sign a possible error before the end of the normalization process."
                "<br><br>µ(ij) are numerical values used by DESeq2 within its NB-GML."
            ),
            "plot_name": "distro_mu_mqc.png"
        },
        "pvalue_qc": {
            "section": "PValue_QC",
            "title": "Ajdusted P-Value distribution",
            "description": (
                "Ajusted P-Values should have less 'non significative' observations "
                "than significative ones. Thus, these variations of expression  "
                "should come from all studied chromosomes."

            ),
            "plot_name": "pvalue_qc.png"
        },
        "inde_theta_filter": {
            "section": "Independent_Filtering_Theta_Threshold",
            "title": "Independent Filtering (Theta threshold)",
            "description": (
                "Theta threshold (in red) if used in independent filtering to define "
                "weather an observation should be filtered out or not. This graph "
                "should have two knees, and the Theta value should come befor the "
                "first one."
            ),
            "plot_name": "theta_knee_plot_mqc.png"
        },
        "ma_plot": {
            "section": "MA_Plot",
            "title": "MA-plot",
            "description": (
                "The MAplot compares M (log(ratio)) to A (mean average).<br><br> "
                "This helps to highlight possible normalisation issues. We expect no"
                " direct link between these two values; the graph should remain "
                "centered around zero. (powered by DESeq2)"
            ),
            "plot_name": "ma_plot_mqc.png"
        },
        "independent_filter": {
            "section": "Independent_Filtering",
            "title": "Independent Filtering",
            "description": (
                "Independent filtering allows to identify outlayers and possible "
                "false positive low p-values. These graphs are here to illustrate "
                "the amount of calls filtered out by this method."
            ),
            "plot_name": "independent_filtering_mqc.png"
        },
        "consensus_cluster_plus": {
            "section": "consensus_cluster_plus",
            "title": "Consensus Clustering",
            "description": (
                "This graph has been done on DESeq2 normalized counts..<br><br> "
                "This helps to highlight possible confounding effects. We expect "
                "our sample to be well separated over the factor of interest. (powered by "
                "'consensus cluster plus')"
            ),
            "plot_name": "consensus_cluster_plus.png"
        },
        "titv_plot": {
            "section": "titv_plot",
            "title": "Transition over Transversions",
            "description": (
                "This graph shows both the Transition/Transversion ratios and "
                "the contributions of 6 mutational conversion classes in each "
                "sample. (powered by MafTools)"
            ),
            "plot_name": "titv_plot.png"
        },
        "maf_summary": {
            "section": "maf_summary",
            "title": "Summary of the MAF content",
            "description": (
                "Six graphs are available:<br><br> (1) Variant classification "
                "shows the absolute number of variants in each classes. <br>(2) "
                "Variant type shows the main types of variants and their abolute "
                "number in the maf file. <br>(3) SNV class shows the Ti/Tv mutation "
                "classes among the whole maf file. <br>(4) Variant per sample shows the"
                " number of variants in each sample (the colors are the same as "
                "within the (1)'Variant classification' graph. <br>(5) this graph "
                "highlights the dispersion of the absolute counts observed in (1)"
                "'Variant_Classification' graph, across the whole cohort. Finally"
                "<br>(6) Top X mutated genes, shows the top X genes with the highest "
                "number of mutations in the whole cohort."
            ),
            "plot_name": "mafsummary.png"
        },
        "oncoplot": {
            "section": "oncoplot",
            "title": "Oncoplot",
            "description": (
                "This graph is an oncoplot of the genes given in Y. The samples "
                "are on the X axis."
            ),
            "plot_name": "oncoplot.png"
        }
    }


    def write_yaml(output_yaml: Path, data: Dict[str, Any]) -> None:
        """
        Save given dictionnary as Yaml-formatted text file
        """
        with output_yaml.open("w") as outyaml:
            yaml.dump(data, outyaml, default_flow_style=False)


    mqc_config = {"custom_data": {}, "sp": {}, "ignore_images": False}
    mqc_config.update(snakemake.params)
    config_outpath = Path(snakemake.output["multiqc_config"])

    for section, plot in snakemake.input.items():
        output_dir = config_outpath.absolute().parent
        output_plot = f"{config_outpath.absolute().parent}/{section}_mqc.png"
        logging.info(
            "Working on %s (%s). Saving it as %s", section, plot, output_plot
        )
        shell("ln --relative --symbolic --force {plot} {output_plot} {log}")
        mqc_config["custom_data"][section] = {
            "section_name": section_dict[section]["title"],
            "description": section_dict[section]['description']
        }
        mqc_config["sp"][section] = {"fn": output_plot}

    write_yaml(
        output_yaml=Path(snakemake.output["multiqc_config"]),
        data=mqc_config
    )


.. |nl| raw:: html

   <br>
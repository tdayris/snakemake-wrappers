.. _`bio/picard/markduplicateswithmatecigar`:

PICARD MARKDUPLICATESWITHMATECIGAR
==================================

Mark PCR and optical duplicates with picard tools, taking into account the CIGAR of the mate.


**URL**: https://broadinstitute.github.io/picard/command-line-overview.html#MarkDuplicatesWithMateCigar

Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule mark_duplicates:
        input:
            "mapped/{sample}.bam"
        output:
            bam="dedup/{sample}.bam",
            metrics="dedup/{sample}.metrics.txt"
        log:
            "logs/picard/dedup/{sample}.log"
        params:
            "REMOVE_DUPLICATES=true"
        resources:
            mem_mb=1024
        wrapper:
            "0.50.4-2418-g8fefa1e53/bio/picard/markduplicateswithmatecigar"

Note that input, output and log file paths can be chosen freely.

When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``picard==2.22.1``
* ``snakemake-wrapper-utils==0.1.3``

Input/Output
------------
**Input:**

* bam file. This must be the only element of the input file list

**Output:**

* ``bam``: bam file with marked or removed duplicates
* ``metrics``: Path to metrics file



Params
------

* ``extra``: The `extra` param allows for additional program arguments.

* ``java_opts``: The `java_opts` param allows for additional arguments to be passed to the java compiler, e.g. "-XX:ParallelGCThreads=10" (not for `-XmX` or `-Djava.io.tmpdir`, since they are handled automatically).




Notes
-----

This tool/wrapper does not handle multithreading



Authors
-------

* Johannes Köster
* Filipe G. Vieira


Code
----

.. code-block:: python

    __author__ = "Johannes Köster"
    __copyright__ = "Copyright 2016, Johannes Köster"
    __email__ = "koester@jimmy.harvard.edu"
    __license__ = "MIT"


    from snakemake.shell import shell
    from snakemake_wrapper_utils.java import get_java_opts

    log = snakemake.log_fmt_shell(stdout=True, stderr=True, append=True)

    extra = snakemake.params.get("extra", "")
    java_opts = get_java_opts(snakemake)


    shell(
        "picard MarkDuplicatesWithMateCigar {java_opts} {extra} INPUT={snakemake.input} "
        "OUTPUT={snakemake.output.bam} METRICS_FILE={snakemake.output.metrics} "
        "{log}"
    )


.. |nl| raw:: html

   <br>
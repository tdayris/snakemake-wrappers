.. _`bio/picard/collecthsmetrics`:

PICARD COLLECTHSMETRICS
=======================

Collects hybrid-selection (HS) metrics for a SAM or BAM file using picard.


**URL**: https://gatk.broadinstitute.org/hc/en-us/articles/360037591891-CollectHsMetrics-Picard-

Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule picard_collect_hs_metrics:
        input:
            bam="mapped/{sample}.bam",
            reference="genome.fasta",
            # Baits and targets should be given as interval lists. These can
            # be generated from bed files using picard BedToIntervalList.
            bait_intervals="regions.intervals",
            target_intervals="regions.intervals"
        output:
            "stats/hs_metrics/{sample}.txt"
        params:
            # Optional extra arguments. Here we reduce sample size
            # to reduce the runtime in our unit test.
            extra="SAMPLE_SIZE=1000"
        # optional specification of memory usage of the JVM that snakemake will respect with global
        # resource restrictions (https://snakemake.readthedocs.io/en/latest/snakefiles/rules.html#resources)
        # and which can be used to request RAM during cluster job submission as `{resources.mem_mb}`:
        # https://snakemake.readthedocs.io/en/latest/executing/cluster.html#job-properties
        resources:
            mem_mb=1024
        log:
            "logs/picard_collect_hs_metrics/{sample}.log"
        wrapper:
            "0.50.4-2418-g8fefa1e53/bio/picard/collecthsmetrics"

Note that input, output and log file paths can be chosen freely.

When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``picard==2.22.1``
* ``snakemake-wrapper-utils==0.1.3``

Input/Output
------------
**Input:**

* ``bam``: bam file
* ``reference``: Path to reference genome (fasta)
* ``bait_intervals``: Interval list which may be generated by Picard BedToIntervalList.
* ``target_intervals``: Interval list which may be generated by Picard BedToIntervalList.

**Output:**

* metrics file. This must be the first element in the output file list



Params
------

* ``extra``: Optional arguments




Notes
-----

This tool/wrapper does not handle multithreading



Authors
-------

* Julian de Ruiter


Code
----

.. code-block:: python

    """Snakemake wrapper for picard CollectHSMetrics."""

    __author__ = "Julian de Ruiter"
    __copyright__ = "Copyright 2017, Julian de Ruiter"
    __email__ = "julianderuiter@gmail.com"
    __license__ = "MIT"


    from snakemake.shell import shell
    from snakemake_wrapper_utils.java import get_java_opts


    inputs = " ".join("INPUT={}".format(in_) for in_ in snakemake.input)
    extra = snakemake.params.get("extra", "")
    log = snakemake.log_fmt_shell(stdout=False, stderr=True)
    java_opts = get_java_opts(snakemake)

    shell(
        "picard CollectHsMetrics"
        " {java_opts} {extra}"
        " INPUT={snakemake.input.bam}"
        " OUTPUT={snakemake.output[0]}"
        " REFERENCE_SEQUENCE={snakemake.input.reference}"
        " BAIT_INTERVALS={snakemake.input.bait_intervals}"
        " TARGET_INTERVALS={snakemake.input.target_intervals}"
        " {log}"
    )


.. |nl| raw:: html

   <br>
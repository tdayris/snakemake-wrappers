.. _`bio/picard/revertsam`:

PICARD REVERTSAM
================

Reverts SAM or BAM files to a previous state. .


**URL**: https://gatk.broadinstitute.org/hc/en-us/articles/360036734291-RevertSam-Picard-

Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule revert_bam:
        input:
            "mapped/{sample}.bam"
        output:
            "revert/{sample}.bam"
        log:
            "logs/picard/revert_sam/{sample}.log"
        params:
            extra="SANITIZE=true" # optional: Extra arguments for picard.
        # optional specification of memory usage of the JVM that snakemake will respect with global
        # resource restrictions (https://snakemake.readthedocs.io/en/latest/snakefiles/rules.html#resources)
        # and which can be used to request RAM during cluster job submission as `{resources.mem_mb}`:
        # https://snakemake.readthedocs.io/en/latest/executing/cluster.html#job-properties
        resources:
            mem_mb=1024
        wrapper:
            "0.50.4-2418-g8fefa1e53/bio/picard/revertsam"

Note that input, output and log file paths can be chosen freely.

When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``picard==2.22.1``
* ``snakemake-wrapper-utils==0.1.3``

Input/Output
------------
**Input:**

* sam/bam file. This must be the first element of the input file list

**Output:**

* sam/bam file. This must be the first element of the output file list



Params
------

* ``extra``: Optional parameters




Notes
-----

This tool/wrapper does not handle multithreading



Authors
-------

* Patrik Smeds


Code
----

.. code-block:: python

    """Snakemake wrapper for picard RevertSam."""

    __author__ = "Patrik Smeds"
    __copyright__ = "Copyright 2018, Patrik Smeds"
    __email__ = "patrik.smeds@gmail.com"
    __license__ = "MIT"


    from snakemake.shell import shell
    from snakemake_wrapper_utils.java import get_java_opts

    extra = snakemake.params.get("extra", "")
    java_opts = get_java_opts(snakemake)

    log = snakemake.log_fmt_shell(stdout=False, stderr=True)

    shell(
        "picard"
        " RevertSam"
        " {java_opts}"
        " {extra}"
        " INPUT={snakemake.input[0]}"
        " OUTPUT={snakemake.output[0]}"
        " {log}"
    )


.. |nl| raw:: html

   <br>
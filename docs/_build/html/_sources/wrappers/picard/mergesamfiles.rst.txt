.. _`bio/picard/mergesamfiles`:

PICARD MERGESAMFILES
====================

Merge sam/bam files using picard tools.


**URL**: https://gatk.broadinstitute.org/hc/en-us/articles/360036884711-MergeSamFiles-Picard-

Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule merge_bams:
        input:
            expand("mapped/{sample}.bam", sample=["a", "b"])
        output:
            "merged.bam"
        log:
            "logs/picard_mergesamfiles.log"
        params:
            "VALIDATION_STRINGENCY=LENIENT"
        # optional specification of memory usage of the JVM that snakemake will respect with global
        # resource restrictions (https://snakemake.readthedocs.io/en/latest/snakefiles/rules.html#resources)
        # and which can be used to request RAM during cluster job submission as `{resources.mem_mb}`:
        # https://snakemake.readthedocs.io/en/latest/executing/cluster.html#job-properties
        resources:
            mem_mb=1024
        wrapper:
            "0.50.4-2418-g8fefa1e53/bio/picard/mergesamfiles"

Note that input, output and log file paths can be chosen freely.

When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``picard==2.22.1``
* ``snakemake-wrapper-utils==0.1.3``

Input/Output
------------
**Input:**

* sam/bam files. These must be the only input elements

**Output:**

* merged sam/bam file. This must be the first element of the output file list



Params
------

* ``Optional parameters``: 




Notes
-----

This tool/wrapper does not handle multithreading



Authors
-------

* Julian de Ruiter


Code
----

.. code-block:: python

    """Snakemake wrapper for picard MergeSamFiles."""

    __author__ = "Julian de Ruiter"
    __copyright__ = "Copyright 2017, Julian de Ruiter"
    __email__ = "julianderuiter@gmail.com"
    __license__ = "MIT"


    from snakemake.shell import shell
    from snakemake_wrapper_utils.java import get_java_opts

    extra = snakemake.params
    java_opts = get_java_opts(snakemake)

    inputs = " ".join("INPUT={}".format(in_) for in_ in snakemake.input)
    log = snakemake.log_fmt_shell(stdout=False, stderr=True)

    shell(
        "picard"
        " MergeSamFiles"
        " {java_opts} {extra}"
        " {inputs}"
        " OUTPUT={snakemake.output[0]}"
        " {log}"
    )


.. |nl| raw:: html

   <br>
.. _`bio/picard/collectalignmentsummarymetrics`:

PICARD COLLECTALIGNMENTSUMMARYMETRICS
=====================================

Collect metrics on aligned reads with picard tools.


**URL**: https://gatk.broadinstitute.org/hc/en-us/articles/360042476752-CollectAlignmentSummaryMetrics-Picard-

Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule alignment_summary:
        input:
            ref="genome.fasta",
            bam="mapped/{sample}.bam"
        output:
            "stats/{sample}.summary.txt"
        log:
            "logs/picard/alignment-summary/{sample}.log"
        params:
            # optional parameters (e.g. relax checks as below)
            "VALIDATION_STRINGENCY=LENIENT "
            "METRIC_ACCUMULATION_LEVEL=null "
            "METRIC_ACCUMULATION_LEVEL=SAMPLE"
        # optional specification of memory usage of the JVM that snakemake will respect with global
        # resource restrictions (https://snakemake.readthedocs.io/en/latest/snakefiles/rules.html#resources)
        # and which can be used to request RAM during cluster job submission as `{resources.mem_mb}`:
        # https://snakemake.readthedocs.io/en/latest/executing/cluster.html#job-properties
        resources:
            mem_mb=1024
        wrapper:
            "0.50.4-2418-g8fefa1e53/bio/picard/collectalignmentsummarymetrics"

Note that input, output and log file paths can be chosen freely.

When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``picard==2.22.1``
* ``snakemake-wrapper-utils==0.1.3``

Input/Output
------------
**Input:**

* ``bam``: Path to bam in which to collect metrics
* ``ref``: Path to genome sequence (fasta).

**Output:**

* Metrics. This must be the first element of the output file list



Params
------

* ``Optional arguments``: 




Notes
-----

This tool/wrapper does not handle multithreading



Authors
-------

* Johannes Köster


Code
----

.. code-block:: python

    __author__ = "Johannes Köster"
    __copyright__ = "Copyright 2016, Johannes Köster"
    __email__ = "johannes.koester@protonmail.com"
    __license__ = "MIT"


    from snakemake.shell import shell
    log = snakemake.log_fmt_shell(stdout=True, stderr=True)
    from snakemake_wrapper_utils.java import get_java_opts

    extra = snakemake.params
    java_opts = get_java_opts(snakemake)

    shell(
        "picard CollectAlignmentSummaryMetrics INPUT={snakemake.input.bam} OUTPUT={snakemake.output[0]} "
        "REFERENCE_SEQUENCE={snakemake.input.ref} {log}"
    )


.. |nl| raw:: html

   <br>
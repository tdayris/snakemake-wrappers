.. _`bio/picard/collectgcbiasmetrics`:

PICARD COLLECTGCBIASMETRICS
===========================

Run picard CollectGcBiasMetrics to generate QC metrics pertaining to GC bias.


**URL**: https://broadinstitute.github.io/picard/command-line-overview.html#CollectGcBiasMetrics

Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule alignment_summary:
        input:
            # BAM aligned to reference genome
            bam="mapped/a.bam",
            # reference genome FASTA from which GC-context is inferred
            ref="genome.fasta"
        output:
            metrics="results/a.gcmetrics.txt",
            chart="results/a.gc.pdf",
            summary="results/a.summary.txt"
        params:
            # optional additional parameters, for example,
            extra="MINIMUM_GENOME_FRACTION=1E-5"
        log:
            "logs/picard/a.gcmetrics.log"
        # optional specification of memory usage of the JVM that snakemake will respect with global
        # resource restrictions (https://snakemake.readthedocs.io/en/latest/snakefiles/rules.html#resources)
        # and which can be used to request RAM during cluster job submission as `{resources.mem_mb}`:
        # https://snakemake.readthedocs.io/en/latest/executing/cluster.html#job-properties
        resources:
            mem_mb=1024
        wrapper:
            "0.50.4-2418-g8fefa1e53/bio/picard/collectgcbiasmetrics"

Note that input, output and log file paths can be chosen freely.

When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``picard==2.25.4``
* ``snakemake-wrapper-utils==0.1.3``

Input/Output
------------
**Input:**

* ``bam``: BAM file of RNA-seq data aligned to genome
* ``ref``: REF_FLAT formatted file of transcriptome annotations

**Output:**

* ``metrics``: GC metrics text file
* ``chart``: GC metrics PDF figure
* ``summary``: GC summary metrics text file



Params
------

* ``extra``: Optional arguments




Notes
-----

This tool/wrapper does not handle multithreading



Authors
-------

* Brett Copeland


Code
----

.. code-block:: python

    __author__ = "Brett Copeland"
    __copyright__ = "Copyright 2021, Brett Copeland"
    __email__ = "brcopeland@ucsd.edu"
    __license__ = "MIT"


    from snakemake.shell import shell
    from snakemake_wrapper_utils.java import get_java_opts

    extra = snakemake.params.get("extra", "")
    java_opts = get_java_opts(snakemake)
    log = snakemake.log_fmt_shell(stdout=True, stderr=True)

    shell(
        "picard CollectGcBiasMetrics "
        "{java_opts} {extra} "
        "INPUT={snakemake.input.bam} "
        "OUTPUT={snakemake.output.metrics} "
        "CHART={snakemake.output.chart} "
        "SUMMARY_OUTPUT={snakemake.output.summary} "
        "REFERENCE_SEQUENCE={snakemake.input.ref} "
        "{log}"
    )


.. |nl| raw:: html

   <br>
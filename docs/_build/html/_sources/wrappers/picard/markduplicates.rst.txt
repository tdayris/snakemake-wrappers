.. _`bio/picard/markduplicates`:

PICARD MARKDUPLICATES
=====================

Mark PCR and optical duplicates with picard tools.


**URL**: https://broadinstitute.github.io/picard/command-line-overview.html#MarkDuplicates

Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule mark_duplicates:
        input:
            bam="mapped/{sample}.bam"
        output:
            bam="dedup/{sample}.bam",
            metrics="dedup/{sample}.metrics.txt"
        log:
            "logs/picard/dedup/{sample}.log"
        params:
            extra="REMOVE_DUPLICATES=true"
        # optional specification of memory usage of the JVM that snakemake will respect with global
        # resource restrictions (https://snakemake.readthedocs.io/en/latest/snakefiles/rules.html#resources)
        # and which can be used to request RAM during cluster job submission as `{resources.mem_mb}`:
        # https://snakemake.readthedocs.io/en/latest/executing/cluster.html#job-properties
        resources:
            mem_mb=1024
        wrapper:
            "0.50.4-2418-g8fefa1e53/bio/picard/markduplicates"

Note that input, output and log file paths can be chosen freely.

When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``picard==2.22.1``
* ``snakemake-wrapper-utils==0.1.3``

Input/Output
------------
**Input:**

* bam file(s). These must be  the only input files

**Output:**

* ``bam``: bam file with marked or removed duplicates
* ``metrics``: Path to metrics file



Params
------

* ``extra``: Optional parameters




Notes
-----

This tool/wrapper does not handle multithreading



Authors
-------

* Johannes Köster


Code
----

.. code-block:: python

    __author__ = "Johannes Köster"
    __copyright__ = "Copyright 2016, Johannes Köster"
    __email__ = "koester@jimmy.harvard.edu"
    __license__ = "MIT"


    from snakemake.shell import shell
    from snakemake_wrapper_utils.java import get_java_opts

    log = snakemake.log_fmt_shell(stdout=True, stderr=True)

    extra = snakemake.params.get("extra", "")
    java_opts = get_java_opts(snakemake)
    bams = snakemake.input
    if isinstance(bams, str):
        bams = [bams]
    bams = list(map("INPUT={}".format, bams))

    shell(
        "picard MarkDuplicates "  # Tool and its subcommand
        "{java_opts} "  # Automatic java option
        "{extra} "  # User defined parmeters
        "INPUT={snakemake.input.bam} "  # Input file
        "OUTPUT={snakemake.output.bam} "  # Output bam
        "METRICS_FILE={snakemake.output.metrics} "  # Output metrics
        "{log}"  # Logging
    )


.. |nl| raw:: html

   <br>
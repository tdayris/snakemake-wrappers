.. _`bio/sleuth/prep`:

SLEUTH_PREP
===========

Import kallisto/salmon counts in Sleuth


**URL**: 

Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule test_sleuth_prep:
        input:
            target_mapping = "target.tsv",
            meta = "meta.tsv"
        output:
            "sleuth_prep.rds"
        wrapper:
            "0.50.4-2418-g8fefa1e53/bio/sleuth/prep"

Note that input, output and log file paths can be chosen freely.

When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``bioconda:r-sleuth``

Input/Output
------------
**Input:**

* TSV formatted target mapping
* TSV formatted experimental design
* List of salmon quantification directories

**Output:**

* RDS formatted sleuth object





Authors
-------

* Thibault Dayris


Code
----

.. code-block:: R

    #!/bin/R

    # Snakemake wrapper for sleuth prep
    # __author__ = "Thibault Dayris"
    # __copyright__ = "Copyright 2020, Thibault Dayris"
    # __email__ = "thibault.dayris@gustaveroussy.fr"
    # __license__ = "MIT"

    base::library(package = "sleuth", quietly = TRUE);

    threads <- snakemake@threads;
    mc.cores <- threads;
    options(mc.cores = threads);

    command <- "sleuth::sleuth_prep"

    # Load transcript to gene translation table if provided
    target_mapping <- NULL;
    if ("target_mapping" %in% names(snakemake@input)) {
      target_mapping <- utils::read.table(
        file = snakemake@input[["target_mapping"]],
        header = TRUE,
        stringsAsFactors = FALSE,
        sep = "\t"
      );
      command <- base::paste(
        command,
        "target_mapping = target_mapping",
        sep = ", "
      );
    }


    # Load experimental design to perform differential analysis
    meta <- utils::read.table(
        file = snakemake@input[["meta"]],
        header = TRUE,
        sep = "\t"
    );
    command <- base::paste(
      command,
      "sample_to_covariates = meta",
      "num_cores = threads",
      sep = ", "
    );


    # Load user defined arguments
    if ("extra" %in% names(snakemake@params)) {
      if (snakemake@params[["extra"]] != "") {
        command <- base::paste(
          command,
          snakemake@params[["extra"]],
          ")"
          sep = ", "
        );
      }
    }

    ## Finally run sleuth prep
    so <- base::eval(
      base::parse(
        text = command
      )
    );


    base::saveRDS(
      object = so,
      file = snakemake@output[["rds"]]
    );


.. |nl| raw:: html

   <br>
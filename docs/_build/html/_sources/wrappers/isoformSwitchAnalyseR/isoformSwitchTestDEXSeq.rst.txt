.. _`bio/isoformSwitchAnalyseR/isoformSwitchTestDEXSeq`:

ISOFORMSWITCHTESTDEXSEQ
=======================

Testing for Isoform Switches via DEXSeq

**URL**: 

Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule test_isoformSwitchAnalyseR_dexseq:
        input:
            switch_list = "switch_list.RDS"
        output:
            rds = "tested.RDS"
        wrapper:
            "0.50.4-2418-g8fefa1e53/bio/isoformSwitchAnalyzeR/isoformSwitchTestDEXSeq"

Note that input, output and log file paths can be chosen freely.

When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``bioconda:bioconductor-isoformswitchanalyzer=1.8.0``
* ``bioconda:bioconductor-dexseq=1.32.0``

Input/Output
------------
**Input:**

* SwitchList from imported isoform expression (filtered or not)

**Output:**

* Isoform switches




Notes
-----

Parameters:
  * extra: Optional parameters passed to importIsoformExpression, besides "switchAnalyzeRlist"



Authors
-------

* Thibault Dayris


Code
----

.. code-block:: R

    #!/usr/bin/R

    # This script takes a IsoformSwitchAnalyseR object
    # and tests exons with differential expression

    # __author__ = "Thibault Dayris"
    # __copyright__ = "Copyright 2020, Thibault Dayris"
    # __email__ = "thibault.dayris@gustaveroussy.fr"
    # __license__ = "MIT"

    # The main package
    base::library(package = "IsoformSwitchAnalyzeR", quietly = TRUE);
    base::library(package = "DEXSeq", quietly = TRUE);

    # Gathering input dataset and parameters
    switch_list <- base::readRDS(
      file = base::as.character(x = snakemake@input[["switch_list"]])
    );

    extra <- "switchAnalyzeRlist = switch_list";
    if ("extra" %in% base::names(snakemake@params)) {
      extra <- base::paste(
          extra,
          snakemake@params[["extra"]],
          sep = ", "
      );
    }

    command <- base::paste0(
      "IsoformSwitchAnalyzeR::isoformSwitchTestDEXSeq(",
      extra,
      ")"
    );
    base::message("Libraries and input data loaded");
    base::message(command);

    # Running command
    tested <- base::eval(
      base::parse(
        text = command
      )
    );

    # Saving results
    if ("rds" %in% base::names(snakemake@output)) {
      base::saveRDS(
        obj = tested,
        file = snakemake@output[["rds"]]
      );
    }

    if ("tsv" %in% base::names(snakemake@output)) {
      tested_table <- base::as.data.frame(
        x = tested$isoformSwitchAnalysis,
        stringsAsFactors = FALSE
      );

      utils::write.table(
        x = tested_table,
        file = base::as.character(snakemake@output[["tsv"]]),
        sep = "\t",
        row.names = FALSE,
        col.names = TRUE,
        quote = FALSE
      );
    }


.. |nl| raw:: html

   <br>
.. _`bio/gatk/mutect`:

GATK MUTECT2
============

Call somatic SNVs and indels via local assembly of haplotypes

**URL**: https://gatk.broadinstitute.org/hc/en-us/articles/360037593851-Mutect2

Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule mutect2:
        input:
            fasta = "genome/genome.fasta",
            map = "mapped/{sample}.bam"
        output:
            vcf = "variant/{sample}.vcf"
        message:
            "Testing Mutect2 with {wildcards.sample}"
        threads:
            1
        # optional specification of memory usage of the JVM that snakemake will respect with global
        # resource restrictions (https://snakemake.readthedocs.io/en/latest/snakefiles/rules.html#resources)
        # and which can be used to request RAM during cluster job submission as `{resources.mem_mb}`:
        # https://snakemake.readthedocs.io/en/latest/executing/cluster.html#job-properties
        resources:
            mem_mb=1024
        log:
            "logs/mutect_{sample}.log"
        wrapper:
             "0.50.4-2418-g8fefa1e53/bio/gatk/mutect"

    rule mutect2_bam:
        input:
            fasta = "genome/genome.fasta",
            map = "mapped/{sample}.bam"
        output:
            vcf = "variant_bam/{sample}.vcf",
            bam = "variant_bam/{sample}.bam"
        message:
            "Testing Mutect2 with {wildcards.sample}"
        threads:
            1
        # optional specification of memory usage of the JVM that snakemake will respect with global
        # resource restrictions (https://snakemake.readthedocs.io/en/latest/snakefiles/rules.html#resources)
        # and which can be used to request RAM during cluster job submission as `{resources.mem_mb}`:
        # https://snakemake.readthedocs.io/en/latest/executing/cluster.html#job-properties
        resources:
            mem_mb=1024
        log:
            "logs/mutect_{sample}.log"
        wrapper:
             "0.50.4-2418-g8fefa1e53/bio/gatk/mutect"

Note that input, output and log file paths can be chosen freely.

When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``gatk4==4.2.0.0``
* ``snakemake-wrapper-utils==0.1.3``

Input/Output
------------
**Input:**

* ``map``: Mapped reads (SAM/BAM/CRAM)
* ``fasta``: Reference Fasta file

**Output:**

* ``vcf``: Variant file
* ``bam``: Optional output bam file



Params
------

* ``extra``: The `extra` param allows for additional program arguments.

* ``java_opts``: The `java_opts` param allows for additional arguments to be passed to the java compiler, e.g. "-XX:ParallelGCThreads=10" (not for `-XmX` or `-Djava.io.tmpdir`, since they are handled automatically).





Authors
-------

* Thibault Dayris


Code
----

.. code-block:: python

    """Snakemake wrapper for GATK4 Mutect2"""

    __author__ = "Thibault Dayris"
    __copyright__ = "Copyright 2019, Dayris Thibault"
    __email__ = "thibault.dayris@gustaveroussy.fr"
    __license__ = "MIT"

    from snakemake.shell import shell
    from snakemake.utils import makedirs
    from snakemake_wrapper_utils.java import get_java_opts

    log = snakemake.log_fmt_shell(stdout=True, stderr=True)

    bam_output = "--bam-output"
    if snakemake.output.get("bam", None) is not None:
        bam_output = bam_output + " " + snakemake.output.bam
    else:
        bam_output = ""


    germline_resource = ""
    if "germline" in snakemake.input.keys():
        germline_resource = "--germline-resource {}".format(
            snakemake.input["germline"]
        )


    intervals = ""
    if "intervals" in snakemake.input.keys():
        intervals = "--intervals {}".format(snakemake.input["intervals"])


    f1r2 = ""
    if "f1r2" in snakemake.output.keys():
        f1r2 = "--f1r2-tar-gz {}".format(snakemake.output["f1r2"])

    tumor = ""
    if "tumor" in snakemake.input.keys():
        tumor = "--input {}".format(snakemake.input["tumor"])

    pon = ""
    if "pon" in snakemake.input.keys():
        pon = "--panel-of-normals {}".format(snakemake.input["pon"])

    extra = snakemake.params.get("extra", "")
    java_opts = get_java_opts(snakemake)

    java_opts += f" -XX:+UseParallelGC -XX:ParallelGCThreads={snakemake.threads}"

    shell(
        "OMP_NUM_THREADS={snakemake.threads} && export OMP_NUM_THREADS && "
        "gatk --java-options '{java_opts}' Mutect2 "  # Tool and its subprocess
        " {tumor} "  # Path to tumor input file
        "--input {snakemake.input.map} "  # Path to input mapping file
        "{bam_output} "  # Path to output bam file, optional
        "{f1r2} "  # Path to output f1r2 count file
        "{germline_resource} "  # Path to optional germline resource VCF
        "{intervals} "  # Path to optional intervals
        "--output {snakemake.output.vcf} "  # Path to output vcf file
        "--reference {snakemake.input.fasta} "  # Path to reference fasta file
        "--native-pair-hmm-threads {snakemake.threads} "  # Maximum number of threads
        "{extra} "  # Extra parameters
        "{log}"  # Logging behaviour
    )

    # Checking VCF format in search for truncated files
    shell(" ( echo 'Removing {snakemake.output.vcf} if it is truncated.' ; ( gunzip -c {snakemake.output.vcf} | tail ) || rm --verbose {snakemake.output.vcf} ) {log} ")


.. |nl| raw:: html

   <br>
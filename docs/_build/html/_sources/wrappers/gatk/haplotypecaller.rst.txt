.. _`bio/gatk/haplotypecaller`:

GATK HAPLOTYPECALLER
====================

Run gatk HaplotypeCaller.


**URL**: https://gatk.broadinstitute.org/hc/en-us/articles/360037225632-HaplotypeCaller

Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule haplotype_caller:
        input:
            # single or list of bam files
            bam="mapped/{sample}.bam",
            ref="genome.fasta"
            # known="dbsnp.vcf"  # optional
        output:
            gvcf="calls/{sample}.g.vcf",
    #	bam="{sample}.assemb_haplo.bam",
        log:
            "logs/gatk/haplotypecaller/{sample}.log"
        params:
            extra="",  # optional
            java_opts="", # optional
        # optional specification of memory usage of the JVM that snakemake will respect with global
        # resource restrictions (https://snakemake.readthedocs.io/en/latest/snakefiles/rules.html#resources)
        # and which can be used to request RAM during cluster job submission as `{resources.mem_mb}`:
        # https://snakemake.readthedocs.io/en/latest/executing/cluster.html#job-properties
        resources:
            mem_mb=1024
        wrapper:
            "0.50.4-2418-g8fefa1e53/bio/gatk/haplotypecaller"

Note that input, output and log file paths can be chosen freely.

When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``gatk4==4.2.0.0``
* ``snakemake-wrapper-utils==0.1.3``

Input/Output
------------
**Input:**

* ``bam``: Path to bam file(s)
* ``ref``: Path to fasta-formatted reference genome
* ``known``: Path to known variants

**Output:**

* ``gvcf``: Path to GVCF file
* ``bam``: Path to output bam(s)



Params
------

* ``java_opts``: The `java_opts` param allows for additional arguments to be passed to the java compiler, e.g. "-Xmx4G" for one, and "-Xmx4G -XX:ParallelGCThreads=10" for two options.

* ``extra``: The `extra` param allows for additional program arguments.





Authors
-------

* Johannes Köster
* Jake VanCampen


Code
----

.. code-block:: python

    __author__ = "Johannes Köster"
    __copyright__ = "Copyright 2018, Johannes Köster"
    __email__ = "johannes.koester@protonmail.com"
    __license__ = "MIT"


    import os

    from snakemake.shell import shell
    from snakemake_wrapper_utils.java import get_java_opts

    known = snakemake.input.get("known", "")
    if known:
        known = "--dbsnp " + str(known)

    bam_output = snakemake.output.get("bam", "")
    if bam_output:
        bam_output = "--bam-output " + str(bam_output)

    extra = snakemake.params.get("extra", "")
    java_opts = get_java_opts(snakemake)

    bams = snakemake.input.bam
    if isinstance(bams, str):
        bams = [bams]
    bams = list(map("-I {}".format, bams))

    log = snakemake.log_fmt_shell(stdout=True, stderr=True)
    shell(
        "gatk --java-options '{java_opts}' HaplotypeCaller {extra} "
        "-R {snakemake.input.ref} {bams} "
        "-ERC GVCF {bam_output} "
        "-O {snakemake.output.gvcf} {known} {log}"
    )


.. |nl| raw:: html

   <br>
.. _`utils/nextflow`:

NEXTFLOW
========

Run nextflow pipeline

**URL**: 

Example
-------

This wrapper can be used in the following way:

.. code-block:: python




        conda:
            "envs/curl.yaml"
        log:
            "logs/get-genome.log"


        conda:
            "envs/curl.yaml"
        log:
            "logs/get-annotation.log"


        conda:
            "envs/curl.yaml"
        log:
            "logs/get-design.log"


    rule chipseq_pipeline:
        input:
            input="design.csv",
            fasta="data/genome.fasta",
            gtf="data/genome.gtf",
            # any --<argname> pipeline file arguments can be given here as <argname>=<path>
        output:
            "results/multiqc/broadPeak/multiqc_report.html",
        params:
            pipeline="nf-core/chipseq",
            revision="1.2.1",
            profile=["test", "docker"],
            # any --<argname> pipeline arguments can be given here as <argname>=<value>
        handover: True
        wrapper:
            "0.50.4-2418-g8fefa1e53/utils/nextflow"

Note that input, output and log file paths can be chosen freely.

When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``nextflow=20.10``




Notes
-----

This wrapper can e.g. be used to run `nf-core <https://nf-co.re>`_ pipelines. 
In each of the nf-core pipeline descriptions, you will find available parameters and the output file structure (under "aws results"). 
The latter can be used to set the desired output files for this wrapper.


Authors
-------

* Johannes Köster


Code
----

.. code-block:: python

    __author__ = "Johannes Köster"
    __copyright__ = "Copyright 2021, Johannes Köster"
    __email__ = "johannes.koester@uni-due.de"
    __license__ = "MIT"

    import os
    from snakemake.shell import shell

    revision = snakemake.params.get("revision")
    profile = snakemake.params.get("profile", [])
    if isinstance(profile, str):
        profile = [profile]

    args = []

    if revision:
        args += ["-revision", revision]
    if profile:
        args += ["-profile", ",".join(profile)]
    print(args)

    # TODO pass threads in case of single job
    # TODO limit parallelism in case of pipeline
    # TODO handle other resources

    add_parameter = lambda name, value: args.append("--{} {}".format(name, value))

    for name, files in snakemake.input.items():
        if isinstance(files, list):
            # TODO check how multiple input files under a single arg are usually passed to nextflow
            files = ",".join(files)
        add_parameter(name, files)
    for name, value in snakemake.params.items():
        if name != "pipeline" and name != "revision":
            add_parameter(name, value)

    log = snakemake.log_fmt_shell(stdout=False, stderr=True)
    args = " ".join(args)
    pipeline = snakemake.params.pipeline

    shell("nextflow run {pipeline} {args} {log}")


.. |nl| raw:: html

   <br>
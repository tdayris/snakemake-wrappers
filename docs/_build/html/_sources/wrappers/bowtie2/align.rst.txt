.. _`bio/bowtie2/align`:

BOWTIE2
=======

Map reads with bowtie2.

**URL**: http://bowtie-bio.sourceforge.net/bowtie2/index.shtml

Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule bowtie2:
        input:
            sample=["reads/{sample}.1.fastq", "reads/{sample}.2.fastq"]
        output:
            "mapped/{sample}.bam"
        log:
            "logs/bowtie2/{sample}.log"
        params:
            index="index/genome",  # prefix of reference genome index (built with bowtie2-build)
            extra=""  # optional parameters
        threads: 8  # Use at least two threads
        wrapper:
            "0.50.4-2418-g8fefa1e53/bio/bowtie2/align"

Note that input, output and log file paths can be chosen freely.

When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``bowtie2==2.4.4``
* ``samtools==1.9``
* ``openssl=1.0``

Input/Output
------------
**Input:**

* ``sample``: List of input fastq files. R1 for Single End, R1 and R2 for Paired end.

**Output:**

* BAM formatted aligned reads, this must be the first element of the output file list



Params
------

* ``index``: Index prefix

* ``extra``: Optional parameters, more information on the `bowtie2-build documentation <http://bowtie-bio.sourceforge.net/bowtie2/manual.shtml#command-line>`_




Notes
-----

This wrapper uses an inner pipe. Make sure to use at least two threads in your Snakefile.


Authors
-------

* Johannes Köster


Code
----

.. code-block:: python

    __author__ = "Johannes Köster"
    __copyright__ = "Copyright 2016, Johannes Köster"
    __email__ = "koester@jimmy.harvard.edu"
    __license__ = "MIT"


    from snakemake.shell import shell

    extra = snakemake.params.get("extra", "")
    log = snakemake.log_fmt_shell(stdout=True, stderr=True)

    n = len(snakemake.input.sample)
    assert (
        n == 1 or n == 2
    ), "input->sample must have 1 (single-end) or 2 (paired-end) elements."

    if n == 1:
        reads = "-U {}".format(*snakemake.input.sample)
    else:
        reads = "-1 {} -2 {}".format(*snakemake.input.sample)

    shell(
        "(bowtie2 --threads {snakemake.threads} {extra} "
        "-x {snakemake.params.index} {reads} "
        "| samtools view -Sbh -o {snakemake.output[0]}) {log}"
    )


.. |nl| raw:: html

   <br>
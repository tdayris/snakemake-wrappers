.. _`bio/pandora/index`:

PANDORA INDEX
=============

Index population reference graph (PRG) sequences.

**URL**: https://github.com/rmcolq/pandora/wiki/Usage#build-index

Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule pandora_index:
        input:
            "{gene}/prg.fa",
        output:
            index="{gene}/prg.fa.k15.w14.idx",
            kmer_prgs=directory("{gene}/kmer_prgs"),
        log:
            "pandora_index/{gene}.log",
        params:
            options="-v -k 15 -w 14",
        threads: 1
        wrapper:
            "0.50.4-2418-g8fefa1e53/bio/pandora/index"

Note that input, output and log file paths can be chosen freely.

When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``pandora=0.9``

Input/Output
------------
**Input:**

* A PRG file (made by `make_prg <https://github.com/iqbal-lab-org/make_prg>`) to index

**Output:**

* ``index``: A pandora index file
* ``kmer_prgs``: A directory of the index kmer PRGs in GFA format



Params
------

* ``options``: Any options other than threads (see docs)





Authors
-------

* Michael Hall


Code
----

.. code-block:: python

    """Snakemake wrapper for indexing population reference graph (PRG) sequences with
    pandora
    """

    __author__ = "Michael Hall"
    __copyright__ = "Copyright 2021, Michael Hall"
    __email__ = "michael@mbh.sh"
    __license__ = "MIT"

    from snakemake.shell import shell

    log = snakemake.log_fmt_shell(stdout=True, stderr=True, append=False)
    options = snakemake.params.get("options", "")

    shell("pandora index -t {snakemake.threads} {options} {snakemake.input} {log}")


.. |nl| raw:: html

   <br>
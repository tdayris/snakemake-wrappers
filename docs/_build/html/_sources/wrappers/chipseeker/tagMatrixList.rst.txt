.. _`bio/chipseeker/tagMatrixList`:

GETTAGMATRIX
============

Load Peak files in R with ChipSeeker

**URL**: 

Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule test_chipseeker_getTagMatrix:
        input:
            peaks = ["bampe.narrowPeak"]
        output:
            rds = "bampe.narrowPeak.RDS"
        wrapper:
            "0.50.4-2418-g8fefa1e53/bio/chipseeker/tagMatrixList"

Note that input, output and log file paths can be chosen freely.

When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``bioconda:bioconductor-txdb.hsapiens.ucsc.hg19.knowngene=3.2.2``
* ``bioconda:bioconductor-txdb.hsapiens.ucsc.hg38.knowngene=3.10.0``
* ``bioconda:bioconductor-txdb.mmusculus.ucsc.mm10.knowngene=3.10.0``
* ``bioconda:bioconductor-txdb.mmusculus.ucsc.mm9.knowngene=3.2.2``
* ``bioconda:bioconductor-chipseeker=1.24.0``
* ``bioconda:bioconductor-clusterprofiler=3.16.0``

Input/Output
------------
**Input:**

* A single peak file from macs2

**Output:**

* A RDS formatted file containing peaks




Notes
-----

Set the genome annotation (hg19, hg38, mm9, mm10) with the txdb parameter.
Additional organism shall be added on demand.



Authors
-------

* Thibault Dayris


Code
----

.. code-block:: R

    #!/usr/bin/R

    # This script loads peaks into R with ChipSeeker

    # __author__ = "Thibault Dayris"
    # __copyright__ = "Copyright 2020, Thibault Dayris"
    # __email__ = "thibault.dayris@gustaveroussy.fr"
    # __license__ = "MIT"


    # Load libraries
    base::library(package = "ChIPseeker", quietly = TRUE);


    # Load user parameters
    txdb <- "hg38";
    if ("txdb" %in% base::names(snakemake@params)) {
      txdb <- base::as.character(x = snakemake@params[["txdb"]]);
    }

    if (txdb == "hg19") {
      base::library(package = "TxDb.Hsapiens.UCSC.hg19.knownGene", quietly = TRUE);
      txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene;
    } else if (txdb == "hg38") {
      base::library(package = "TxDb.Hsapiens.UCSC.hg38.knownGene", quietly = TRUE);
      txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene;
    } else if (txdb == "mm10") {
      base::library(package = "TxDb.Mmusculus.UCSC.mm10.knownGene", quietly = TRUE);
      txdb <- TxDb.Mmusculus.UCSC.mm10.knownGene;
    } else {
      base::library(package = "TxDb.Mmusculus.UCSC.mm9.knownGene", quietly = TRUE);
      txdb <- TxDb.Mmusculus.UCSC.mm9.knownGene;
    }

    peak_files_path <- sapply(
      snakemake@input[["peaks"]],
      function(peak_path) base::as.character(x = peak_path)
    );

    rds_file_path <- base::as.character(
      x = snakemake@output[["rds"]]
    );

    # Load peak files
    extra <- 'TxDb = txdb';
    if ('get_promoters' %in% base::names(snakemake@params)) {
      cmd <- base::paste(
        extra,
        snakemake@params[["get_promoters"]],
        sep = ", "
      );
    }

    # Create object
    promoters <- base::eval(
      base::parse(
        text = base::paste0(
          "ChIPseeker::getPromoters(", extra, ");"
        )
      )
    );

    tagMatrixList <- lapply(
      peak_files_path,
      ChIPseeker::getTagMatrix,
      windows=promoters
    );


    # Save RDS
    base::saveRDS(
      object = tagMatrixList,
      file = rds_file_path
    );


.. |nl| raw:: html

   <br>
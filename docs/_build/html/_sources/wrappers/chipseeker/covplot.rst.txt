.. _`bio/chipseeker/covplot`:

COVERAGE PLOT
=============

Build a coverage plot over the genome with ChipSeeker

**URL**: 

Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule test_chipseeker_covplot:
        input:
            rds = "bampe.narrowPeak.RDS"
        output:
            png = "covplot.png"
        params:
            extra = "weightCol='V5'"
        wrapper:
            "0.50.4-2418-g8fefa1e53/bio/chipseeker/covplot"

Note that input, output and log file paths can be chosen freely.

When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``bioconda:bioconductor-chipseeker=1.24.0``

Input/Output
------------
**Input:**

* A RDS formatted file containing peaks as GRanges or GRangesList

**Output:**

* A PNG formatted coverage plot




Notes
-----

notes



Authors
-------

* Thibault Dayris


Code
----

.. code-block:: R

    #!/usr/bin/R

    # This script loads peaks into R with ChipSeeker

    # __author__ = "Thibault Dayris"
    # __copyright__ = "Copyright 2020, Thibault Dayris"
    # __email__ = "thibault.dayris@gustaveroussy.fr"
    # __license__ = "MIT"


    # Load libraries
    base::library(package = "ChIPseeker", quietly = TRUE);

    # Read peaks
    tagMatrixList <- base::readRDS(
      file = base::as.character(x = snakemake@input[["rds"]])
    );
    base::message("Dataset loaded");

    extra <- "peak = tagMatrixList";
    if ("extra" %in% base::names(snakemake@params)) {
      extra <- base::paste(
        extra,
        snakemake@params[["extra"]],
        sep = ", "
      );
    }

    # Create R command line
    command <- base::eval(
      base::parse(
        text = base::paste0(
          "ChIPseeker::covplot(", extra, ")"
        )
      )
    );


    # Build plot
    png(
      filename = snakemake@output[["png"]],
      width = 1024,
      height = 768,
      units = "px",
      type = "cairo"
    );

    base::eval(
      base::parse(
        text = command
      )
    );

    dev.off();


.. |nl| raw:: html

   <br>
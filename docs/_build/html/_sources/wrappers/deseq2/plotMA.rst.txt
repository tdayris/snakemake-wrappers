.. _`bio/deseq2/plotMA`:

PLOT MA
=======

Perform a MA plot over DESeq2 results

**URL**: 

Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule test_deseq2_plotma:
        input:
            res = "res.tsv"
        output:
            png = "MAplot.png"
        message:
            "Testing MAplot with DESeq2"
        threads:
            1
        resources:
            mem_mb = (
                lambda wildcards, attempt: min(attempt * 1024, 2048)
            ),
            time_min = (
                lambda wildcards, attempt: min(attempt * 10, 20)
            )
        log:
            "logs/test_deseq2_plotma.log"
        wrapper:
            "0.50.4-2418-g8fefa1e53/bio/deseq2/plotMA"

Note that input, output and log file paths can be chosen freely.

When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``bioconda::bioconductor-deseq2==1.32.0``
* ``conda-forge::r-cairo==1.5_12.2``

Input/Output
------------
**Input:**

* A DESeq2 TSV formatted wald test result

**Output:**

* A PNG image of the MA plot




Notes
-----

Parameters:

* alpha_threshold: The padj threshold used to classify



Authors
-------

* Thibault Dayris


Code
----

.. code-block:: R

    #!/usr/bin/R

    # This script takes a deseq2 dataset object and performs
    # a mean average plot

    # __author__ = "Thibault Dayris"
    # __copyright__ = "Copyright 2020, Thibault Dayris"
    # __email__ = "thibault.dayris@gustaveroussy.fr"
    # __license__ = "MIT"

    # Sink the stderr and stdout to the snakemake log file
    # https://stackoverflow.com/a/48173272
    log.file<-file(snakemake@log[[1]],open="wt");
    base::sink(log.file);
    base::sink(log.file,type="message");

    # Differential Gene expression
    base::library(package = "DESeq2", quietly = TRUE);
    # Graphic library
    base::library(package = "Cairo", quietly = TRUE);

    # Load tsv file
    res <- utils::read.table(
      file = snakemake@input[["res"]],
      sep = "\t",
      stringsAsFactors = FALSE
    );

    alpha_threshold <- 0.05;
    if ("alpha_threshold" %in% names(snakemake@params)) {
      alpha_threshold <- base::as.numeric(
        x = snakemake@params[["alpha_threshold"]]
      );
    }

    res$Sig <- res$padj < alpha_threshold;
    res <- res[, c("baseMean", "log2FoldChange", "Sig")];

    # Build extra parameters for DESeq2 plotMA
    extra <- "res";
    if ("extra" %in% snakemake@params) {
      extra <- base::paste(
        extra,
        base::as.character(x = snakemake@params[["extra"]]),
        sep = ", "
      );
    }

    command <- base::paste0(
      "DESeq2::plotMA(",
      extra,
      ");"
    );

    base::message(command);

    # Build plot
    png(
      filename = snakemake@output[["png"]],
      width = 1024,
      height = 768,
      units = "px",
      type = "cairo"
    );

    base::eval(
      base::parse(
        text = command
      )
    );

    dev.off();

    # Proper syntax to close the connection for the log file
    # but could be optional for Snakemake wrapper
    base::sink(type="message");
    base::sink();


.. |nl| raw:: html

   <br>
.. _`bio/deseq2/estimateSizeFactors`:

ESTIMATE SIZE FACTORS
=====================



**URL**: 

Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule test_estimateSizeFactor:
        input:
            dds = "dds.RDS"
        output:
            dds = "esf.RDS"
        message:
            "Testing estimateSizeFactor"
        threads:
            1
        resources:
            mem_mb = (
                lambda wildcards, attempt: min(attempt * 1024, 2048)
            ),
            time_min = (
                lambda wildcards, attempt: min(attempt * 10, 20)
            )
        log:
            "logs/test_estimateSizeFactor.log"
        wrapper:
            "0.50.4-2418-g8fefa1e53/bio/deseq2/estimateSizeFactors"

Note that input, output and log file paths can be chosen freely.

When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``bioconda::bioconductor-deseq2==1.32.0``

Input/Output
------------
**Input:**

* A DESeq2 dataset object as RDS

**Output:**

* A DESeq2 dataset with estimated size factors




Notes
-----

Any R parameters can be given to extra.



Authors
-------

* Thibault Dayris


Code
----

.. code-block:: R

    #!/usr/bin/R

    # This script takes a deseq2 dataset object and estimates
    # size factors for further normalization

    # __author__ = "Thibault Dayris"
    # __copyright__ = "Copyright 2020, Thibault Dayris"
    # __email__ = "thibault.dayris@gustaveroussy.fr"
    # __license__ = "MIT"

    # Sink the stderr and stdout to the snakemake log file
    # https://stackoverflow.com/a/48173272
    log.file<-file(snakemake@log[[1]],open="wt");
    base::sink(log.file);
    base::sink(log.file,type="message");

    # Differential Gene expression
    base::library(package = "DESeq2", quietly = TRUE);

    # Cast input path as character
    dds_path <- base::as.character(x = snakemake@input[["dds"]]);
    dds <- base::readRDS(dds_path);


    # Check if user provided optional parameters
    extra <- "";
    if ("extra" %in% names(snakemake@params)) {
      extra <- base::paste0(
        ", ",
        base::as.character(x = snakemake@params[["extra"]])
      );
    }


    # Create object
    dds <- base::eval(
      base::parse(
        text = base::paste0(
          "DESeq2::estimateSizeFactors(dds", extra, ");"
        )
      )
    );

    # Save as RDS
    output_path <- base::as.character(snakemake@output[["dds"]]);
    base::saveRDS(
      obj = dds,
      file = output_path
    );

    # Proper syntax to close the connection for the log file
    # but could be optional for Snakemake wrapper
    base::sink(type="message");
    base::sink();


.. |nl| raw:: html

   <br>
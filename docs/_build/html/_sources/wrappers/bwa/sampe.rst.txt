.. _`bio/bwa/sampe`:

BWA SAMPE
=========

Map paired-end reads with bwa sampe. For more information about BWA see `BWA documentation <http://bio-bwa.sourceforge.net/bwa.shtml>`_.

**URL**: http://bio-bwa.sourceforge.net/bwa.shtml

Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule bwa_sampe:
        input:
            fastq=["reads/{sample}.1.fastq", "reads/{sample}.2.fastq"],
            sai=["sai/{sample}.1.sai", "sai/{sample}.2.sai"]
        output:
            "mapped/{sample}.bam"
        params:
            index="genome",
            extra=r"-r '@RG\tID:{sample}\tSM:{sample}'", # optional: Extra parameters for bwa.
            sort="none",                                 # optional: Enable sorting. Possible values: 'none', 'samtools' or 'picard'`
            sort_order="queryname",                      # optional: Sort by 'queryname' or 'coordinate'
            sort_extra=""                                # optional: extra arguments for samtools/picard
        log:
            "logs/bwa_sampe/{sample}.log"
        wrapper:
            "0.50.4-2418-g8fefa1e53/bio/bwa/sampe"

Note that input, output and log file paths can be chosen freely.

When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``bwa==0.7.17``
* ``samtools==1.9``
* ``picard==2.20.1``

Input/Output
------------
**Input:**

* ``sai``: Path to sai file from bwa aln
* ``fastq``: Path to fastq file

**Output:**

* sam/bam file



Params
------

* ``index``: Path to genome index

* ``extra``: Optional parameters for bwa sampe

* ``sort``: Either "none", "samtools", or "picard".

* ``sort_order``: Either "coordinate" or "queryname"

* ``sort_extra``: Extra parameters for samtools or picard




Notes
-----

This wrapper uses two threads if sort parameter is not None.



Authors
-------

* Julian de Ruiter


Code
----

.. code-block:: python

    """Snakemake wrapper for bwa sampe."""

    __author__ = "Julian de Ruiter"
    __copyright__ = "Copyright 2017, Julian de Ruiter"
    __email__ = "julianderuiter@gmail.com"
    __license__ = "MIT"


    from os import path

    from snakemake.shell import shell


    # Check inputs.
    if not len(snakemake.input.sai) == 2:
        raise ValueError("input.sai must have 2 elements")

    if not len(snakemake.input.fastq) == 2:
        raise ValueError("input.fastq must have 2 elements")

    # Extract arguments.
    extra = snakemake.params.get("extra", "")

    sort = snakemake.params.get("sort", "none")
    sort_order = snakemake.params.get("sort_order", "coordinate")
    sort_extra = snakemake.params.get("sort_extra", "")

    log = snakemake.log_fmt_shell(stdout=False, stderr=True)

    # Determine which pipe command to use for converting to bam or sorting.
    if sort == "none":

        # Simply convert to bam using samtools view.
        pipe_cmd = "samtools view -Sbh -o {snakemake.output[0]} -"

    elif sort == "samtools":

        # Sort alignments using samtools sort.
        pipe_cmd = "samtools sort {sort_extra} -o {snakemake.output[0]} -"

        # Add name flag if needed.
        if sort_order == "queryname":
            sort_extra += " -n"

        # Use prefix for temp.
        prefix = path.splitext(snakemake.output[0])[0]
        sort_extra += " -T " + prefix + ".tmp"

    elif sort == "picard":

        # Sort alignments using picard SortSam.
        pipe_cmd = (
            "picard SortSam {sort_extra} INPUT=/dev/stdin"
            " OUTPUT={snakemake.output[0]} SORT_ORDER={sort_order}"
        )

    else:
        raise ValueError("Unexpected value for params.sort ({})".format(sort))

    # Run command.
    shell(
        "(bwa sampe"
        " {extra}"
        " {snakemake.params.index}"
        " {snakemake.input.sai}"
        " {snakemake.input.fastq}"
        " | " + pipe_cmd + ") {log}"
    )


.. |nl| raw:: html

   <br>
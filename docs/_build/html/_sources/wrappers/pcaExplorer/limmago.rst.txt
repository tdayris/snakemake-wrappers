.. _`bio/pcaExplorer/limmago`:

PCAEXPLORER LIMMAGO
===================

Run quick limma go-term analysis

**URL**: 

Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule test_pcaexplorer_limmago:
        input:
            dds = "dds.RDS",
            dst = "VST.RDS"
        output:
            limmago = "limmago.RDS"
        message:
            "Testing pcaExplorer limmago"
        threads:
            1
        resources:
            mem_mb = (
                lambda wildcards, attempt: min(attempt * 1024, 10240)
            ),
            time_min = (
                lambda wildcards, attempt: min(attempt * 20, 200)
            )
        params:
            extra = " organism = 'Hs', pca_ngenes = 100, inputType = 'SYMBOL'"
        log:
            "logs/test_pcaexplorer_limmago.log"
        wrapper:
            "0.50.4-2418-g8fefa1e53/bio/pcaExplorer/limmago"

Note that input, output and log file paths can be chosen freely.

When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``bioconda::bioconductor-deseq2==1.32.0``
* ``bioconda::bioconductor-pcaexplorer==2.18.0``
* ``bioconda::bioconductor-delayedarray==0.18.0``
* ``conda-forge::r-readr==1.4.0``
* ``conda-forge::r-jsonlite==1.7.2``
* ``bioconda::bioconductor-summarizedexperiment==1.22.0``
* ``bioconda::bioconductor-iranges==2.26.0``
* ``conda-forge::cairo==1.16.0``
* ``conda-forge::r-cairo==1.5_12.2``
* ``bioconda::bioconductor-org.hs.eg.db==3.13.0``
* ``bioconda::bioconductor-org.mm.eg.db==3.13.0``

Input/Output
------------
**Input:**

* A dds object of all samples and targets
* A normalized dds (vst/rlog) of all samples and targets

**Output:**

* A RDS file contianing the result of go-terms enrichment




Notes
-----

This is only used by pcaExplorer and has no other purpose.
This is not a differential analysis result.
This is not a differential-expression-based go-term enrichment.

Supported organisms:

* hs: Homo Sapiens
* mm: Muus Musculus



Authors
-------

* Thibault Dayris


Code
----

.. code-block:: R

    #!/usr/bin/R

    # __author__ = "Thibault Dayris"
    # __copyright__ = "Copyright 2020, Thibault Dayris"
    # __email__ = "thibault.dayris@gustaveroussy.fr"
    # __license__ = "MIT"

    # This script takes a deseq2 dataset object, a deseq2
    # transformed data counts object, and an organism
    # name, then returns a limma quick pca 2 gene onthology

    # Sink the stderr and stdout to the snakemake log file
    # https://stackoverflow.com/a/48173272
    log.file<-file(snakemake@log[[1]],open="wt");
    base::sink(log.file);
    base::sink(log.file,type="message");

    base::library(package = "DESeq2");        # Differential Gene expression
    base::library(package = "pcaExplorer");   # Handles PCA
    base::library(package = "DelayedArray");  # Handle in-memory array-like datasets
    base::library(package = "IRanges");       # Handle vectors
    base::library(package = "org.Hs.eg.db");  # Human genome annotation
    base::library(package = "org.Mm.eg.db");  # Mouse genome annotation

    # Load specified input files
    dds_path <- base::as.character(
      x = snakemake@input[["dds"]]
    );
    dds <- base::readRDS(file = dds_path);

    dst_path <- base::as.character(
      x = snakemake@input[["dst"]]
    );
    dst <- base::readRDS(file = dst_path);
    base::message(
      "Libraries and input dataset loaded"
    );

    # Building limmago
    bg_ids <- IRanges::rownames(x = dds)[
      DelayedArray::rowSums(x = DESeq2::counts(dds)) > 0
    ];
    print(head(bg_ids));
    print(head(dds));
    print(head(dst));

    extra <- "se = dst, background_genes = bg_ids"
    if ("extra" %in% names(snakemake@params)) {
      extra <- base::paste(
        extra,
        snakemake@params[["extra"]],
        sep = ","
      )
    }

    command <- base::paste0(
      "pcaExplorer::limmaquickpca2go(",
      extra,
      ");"
    );

    base::message(command);

    limmago <- base::eval(
      base::parse(
        text = command
      )
    );
    base::message(
      "Go analysis of PCA components performed"
    );

    limmago_output <- base::as.character(
      x = snakemake@output[["limmago"]]
    );
    base::saveRDS(
      object = limmago,
      file = limmago_output
    );
    base::message(
      "Process over"
    );


    # Proper syntax to close the connection for the log file
    # but could be optional for Snakemake wrapper
    base::sink(type="message");
    base::sink();


.. |nl| raw:: html

   <br>
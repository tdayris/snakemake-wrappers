.. _`bio/bismark/bismark2summary`:

BISMARK2SUMMARY
===============

Generate summary graphical HTML report from several Bismark text report files reports.


**URL**: https://github.com/FelixKrueger/Bismark/blob/master/bismark2summary

Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    import  os

    rule bismark2summary:
        input:
            bam=["bams/a_genome_pe.bam", "bams/b_genome.bam"],

            # Bismark `bismark2summary` discovers reports automatically based
            # on files available in bam file containing folder
            #
            # If your per BAM file reports aren't in the same folder
            # you will need an additional task which symlinks all reports
            # (E.g. your splitting report generated by `bismark_methylation_extractor`
            # tool is in `meth` folder, and alignment related reports in `bams` folder)

            # These dependencies are here just to ensure that corresponding rules
            # has already finished at rule execution time, otherwise some reports
            # will be missing.
            dependencies=[
                "bams/a_genome_PE_report.txt",
                "bams/a_genome_pe.deduplication_report.txt",
                # for example splitting report is missing for 'a' sample

                "bams/b_genome_SE_report.txt",
                "bams/b_genome.deduplication_report.txt",
                "bams/b_genome.deduplicated_splitting_report.txt"
            ]
        output:
            html="qc/{experiment}.bismark2summary.html",
            txt="qc/{experiment}.bismark2summary.txt"
        log:
            "logs/qc/{experiment}.bismark2summary.log"
        wrapper:
            "0.50.4-2418-g8fefa1e53/bio/bismark/bismark2summary"

    rule bismark2summary_prepare_symlinks:
        input:
            "meth/b_genome.deduplicated_splitting_report.txt",
        output:
            temp("bams/b_genome.deduplicated_splitting_report.txt"),
        log:
            "qc/bismark2summary_prepare_symlinks.symlinks.log"
        run:
            wd = os.getcwd()
            shell("echo 'Making symlinks' > {log}")
            for source, target in zip(input, output):
               target_dir = os.path.dirname(target)
               target_name = os.path.basename(target)
               log_path = os.path.join(wd, log[0])
               abs_src_path = os.path.abspath(source)
               shell("cd {target_dir} && ln -f -s {abs_src_path} {target_name} >> {log_path} 2>&1")

            shell("echo 'Done' >> {log}")

Note that input, output and log file paths can be chosen freely.

When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``bowtie2==2.4.2``
* ``bismark==0.23.0``
* ``samtools==1.9``

Input/Output
------------
**Input:**

* ``bam``: One or several (space separated) BAM file paths (aligned bam files with bismark reports in same folder). Also, it is recommended to add dependencies for all required reports using rules order or specifing them in input section using any other keys. E.g. deduplicaton report could be missing if rule only depends on aligned bam file. If you add dependency on deduplicated bam file bismark2report will fail because it expects input files to be initial aligned files with aligning report in same directory.

**Output:**

* ``html``: Output HTML report path (e.g. 'bismark_summary_report.html').
* ``txt``: Output txt table path (e.g. 'bismark_summary_report.txt'). Should have same as 'html' report but with suffix '.txt'.



Params
------

* ``extra``: Any additional args

* ``title``: Optional report custom title.





Authors
-------

* Roman Cherniatchik


Code
----

.. code-block:: python

    """Snakemake wrapper to generate summary graphical HTML report from several Bismark text report files."""
    # https://github.com/FelixKrueger/Bismark/blob/master/bismark2summary

    __author__ = "Roman Chernyatchik"
    __copyright__ = "Copyright (c) 2019 JetBrains"
    __email__ = "roman.chernyatchik@jetbrains.com"
    __license__ = "MIT"

    import os
    from snakemake.shell import shell

    extra = snakemake.params.get("extra", "")
    cmds = ["bismark2summary {extra}"]

    # basename
    bam = snakemake.input.get("bam", None)
    if not bam:
        raise ValueError(
            "bismark/bismark2summary: Please specify aligned BAM file path"
            " (one or several) using 'bam=..'"
        )

    html = snakemake.output.get("html", None)
    txt = snakemake.output.get("txt", None)
    if not html or not txt:
        raise ValueError(
            "bismark/bismark2summary: Please specify both 'html=..' and"
            " 'txt=..' paths in output section"
        )

    basename, ext = os.path.splitext(html)
    if ext.lower() != ".html":
        raise ValueError(
            "bismark/bismark2summary: HTML report file should end"
            " with suffix '.html' but was {} ({})".format(ext, html)
        )

    suggested_txt = basename + ".txt"
    if suggested_txt != txt:
        raise ValueError(
            "bismark/bismark2summary: Expected '{}' TXT report, "
            "but was: '{}'".format(suggested_txt, txt)
        )

    cmds.append("--basename {basename:q}")

    # title
    title = snakemake.params.get("title", None)
    if title:
        cmds.append("--title {title:q}")

    cmds.append("{bam}")

    # log
    log = snakemake.log_fmt_shell(stdout=True, stderr=True)
    cmds.append("{log}")

    # run shell command:
    shell(" ".join(cmds))


.. |nl| raw:: html

   <br>
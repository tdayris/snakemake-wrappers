.. _`bio/plass`:

PLASS
=====

Plass (Protein-Level ASSembler) is software to assemble short read sequencing data on a protein level. The main purpose of Plass is the assembly of complex metagenomic datasets.

**URL**: https://github.com/soedinglab/plass

Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule plass_paired:
        input:
            left=["reads/reads.left.fq.gz", "reads/reads2.left.fq.gz"],
            right=["reads/reads.right.fq.gz", "reads/reads2.right.fq.gz"]
        output:
            "plass/prot.fasta"
        log:
            "logs/plass.log"
        params:
            extra=""
        threads: 4
        wrapper:
            "0.50.4-2418-g8fefa1e53/bio/plass"

    rule plass_single:
        input:
            single=["reads/reads.left.fq.gz", "reads/reads2.left.fq.gz"],
        output:
            "plass/prot_single.fasta"
        log:
            "logs/plass_single.log"
        params:
            extra=""
        threads: 4
        wrapper:
            "0.50.4-2418-g8fefa1e53/bio/plass"

Note that input, output and log file paths can be chosen freely.

When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``plass=2.c7e35``

Input/Output
------------
**Input:**

* ``left``: Path to R1 fastq files
* ``right``: Path to R2 fastq files (Optional)

**Output:**

* fasta containing protein assembly, this must be the first element of the output file list



Params
------

* ``extra``: Optional parameters




Notes
-----

"Steinegger M, Mirdita M and Soeding J. Protein-level assembly increases protein sequence recovery from metagenomic samples manyfold. biorxiv, doi: doi.org/10.1101/386110 (2018)"



Authors
-------

* N. Tessa Pierce


Code
----

.. code-block:: python

    """Snakemake wrapper for PLASS Protein-Level Assembler."""

    __author__ = "N. Tessa Pierce"
    __copyright__ = "Copyright 2018, N. Tessa Pierce"
    __email__ = "ntpierce@gmail.com"
    __license__ = "MIT"

    from os import path
    from snakemake.shell import shell

    extra = snakemake.params.get("extra", "")

    # allow multiple input files for single assembly
    left = snakemake.input.get("left")
    single = snakemake.input.get("single")
    assert (
        left is not None or single is not None
    ), "please check read inputs: either left/right or single read file inputs are required"
    if left:
        left = (
            [snakemake.input.left]
            if isinstance(snakemake.input.left, str)
            else snakemake.input.left
        )
        right = snakemake.input.get("right")
        assert (
            right is not None
        ), "please input 'right' reads or specify that the reads are 'single'"
        right = (
            [snakemake.input.right]
            if isinstance(snakemake.input.right, str)
            else snakemake.input.right
        )
        assert len(left) == len(
            right
        ), "left input needs to contain the same number of files as the right input"
        input_str_left = " " + " ".join(left)
        input_str_right = " " + " ".join(right)
        input_cmd = input_str_left + " " + input_str_right
    else:
        single = (
            [snakemake.input.single]
            if isinstance(snakemake.input.single, str)
            else snakemake.input.single
        )
        input_cmd = " " + " ".join(single)


    outdir = path.dirname(snakemake.output[0])
    tmpdir = path.join(outdir, "tmp")

    log = snakemake.log_fmt_shell(stdout=False, stderr=True)

    shell(
        "plass assemble {input_cmd} {snakemake.output} {tmpdir} --threads {snakemake.threads} {snakemake.params.extra} {log}"
    )


.. |nl| raw:: html

   <br>
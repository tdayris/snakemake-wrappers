.. _`bio/pandas/variant_density`:

VARIANT DENSITY
===============

Compute and filter based on local variant density

**URL**: 

Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule test_variant_density:
        input:
            vcf = "in.vcf"
        output:
            vcf = "filtered.vcf"
        message:
            "Testing variant density filter"
        threads:
            1
        resources:
            mem_mb = (
                lambda wildcards, attempt: min(attempt * 1024, 10240)
            ),
            time_min = (
                lambda wildcards, attempt: min(attempt * 20, 200)
            )
        params:
            filter_vcf = False
        log:
            "logs/test_variant_density.log"
        wrapper:
            "0.50.4-2418-g8fefa1e53/bio/pandas/variant_density"

Note that input, output and log file paths can be chosen freely.

When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``conda-forge:python=3.8.2``

Input/Output
------------
**Input:**

* A VCF formatted text file containing variant informations

**Output:**

* A VCF formatted text file with filtered data




Notes
-----

The VCF is assumed to be sorted.

Parameters:

* window_size (int): The genomic range used to compute variant density. *Default: 150*
* update_header (bool): Add the filtering information in the header. *Default: true.*
* update_info (bool): Add density information in the info column. *Default: true.*
* filter_vcf (bool): Remove the variants in a region which density is below the provided threshold. *Default: false.*



Authors
-------

* Thibault Dayris


Code
----

.. code-block:: python

    #!/usr/bin/python3.8
    # conding: utf-8

    """
    Filter a VCF file based on the variant density within a genomic window
    """

    from typing import Generator, List, TextIO


    def save_lines(lines: List[str],
                   density: int,
                   cluster_id: int,
                   window: str,
                   out_buffer: TextIO) -> Generator[List[str], None, None]:
        """
        This function edits VCF lines
        """
        for line in lines:
            chomp = line.split("\t")
            if chomp[7] == ".":
                chomp[7] = ""
            else:
                chomp[7] += ";"

            chomp[7] += (
                f"VD={density};"
                f"ClusterID={cluster_id};"
                f"ClusterPosition={window}"
            )
            out_buffer.write("\t".join(chomp))


    # IO paths
    vcf_in_path = snakemake.input["vcf"]
    vcf_out_path = snakemake.output["vcf"]

    # The window size
    window_size = snakemake.params.get("window_size", 150)
    filter_out = snakemake.params.get("filter_vcf", False)

    # VCF modifications
    update_header = snakemake.params.get("update_header", True)
    update_info = snakemake.params.get("update_info", True)
    header = f"""##Filtered by VariantDensity.py: ws={window_size}
    ##INFO=<ID=VD,Number=1,Type=Float,Description="Variant density in {window_size}bp">
    ##INFO=<ID=ClusterID,Number=1,Type=Float,Description="The name of the variant density cluster">
    ##INFO=<ID=ClusterPosition,Number=1,Type=String,Description="The cluster position as chr:start-stop">\n"""


    # Main process
    with open(vcf_in_path, "r") as vcfin, open(vcf_out_path, "w") as vcfout:
        #vcf_iter = iter(vcfin, None)
        window = {
            "chrom": None,
            "start": None,
            "stop": None,
            "density": 0,
            "id": 0
        }
        lines = []

        for line in vcfin:
            if line.startswith("#"):
                # Then we are reading a header and we shall print it
                if not line.startswith("##") and update_header is True:
                    # Then it is the last line of the header
                    vcfout.write(header)
                vcfout.write(line)
                continue

            chrom, pos, *_ = line.split("\t")
            pos = int(pos)

            if chrom == window["chrom"] and pos - window["start"] <= window_size:
                window["stop"] = pos
                try:
                    window['density'] += 1
                except AttributeError:
                    window["density"] = 1
                lines.append(line)

            else:
                if (len(lines) != 0) and (len(lines) > 1 or filter_out is False):
                    save_lines(
                        lines=lines,
                        density=1 if window["density"] is None else  window["density"],
                        cluster_id=window["id"],
                        window=f"{window['chrom']}:{window['start']}-{window['stop']}",
                        out_buffer=vcfout
                    )
                window["chrom"] = chrom
                window["start"] = pos
                window["stop"] = pos
                window["density"] = 1
                window["id"] += 1
                lines = [line]

        # Do not forget the last line!
        if len(lines) > 1 or filter_out is False:
            save_lines(
                lines=lines,
                density=1 if window["density"] is None else  window["density"],
                cluster_id=window["id"],
                window=f"{window['chrom']}:{window['start']}-{window['stop']}",
                out_buffer=vcfout
            )


.. |nl| raw:: html

   <br>
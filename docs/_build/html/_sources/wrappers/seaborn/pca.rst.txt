.. _`bio/seaborn/pca`:

PCA
===

Perform PCA on normalized counts

**URL**: 

Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule test_seaborn_pca:
        input:
            counts = "table.tsv"
        output:
            png = ["pca_PC1_PC2.png", "pca_PC2_PC1.png"]
        message:
            "Testing Seaborn PCA"
        threads:
            1
        resources:
            mem_mb = (
                lambda wildcards, attempt: min(attempt * 512, 1024)
            ),
            time_min = (
                lambda wildcards, attempt: min(attempt * 10, 20)
            )
        params:
            conditions = {"A": "CondA", "B": "CondB"},
            axes = [1, 2]
        log:
            "logs/test_seaborn_pca.log"
        wrapper:
            "0.50.4-2418-g8fefa1e53/bio/seaborn/pca"

Note that input, output and log file paths can be chosen freely.

When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``conda-forge::python==3.10.2``
* ``conda-forge::pandas==1.4.0``
* ``conda-forge::numpy==1.22.1``
* ``conda-forge::seaborn==0.11.2``
* ``conda-forge::matplotlib==3.5.1``
* ``conda-forge::pillow==8.4.0``
* ``conda-forge::sklearn-contrib-lightning==0.6.0``
* ``conda-forge::pyqt==5.12.3``
* ``conda-forge::imagemagick==7.1.0_22``
* ``conda-forge::graphicsmagick==1.3.37``
* ``conda-forge::py-opencv==4.5.5``

Input/Output
------------
**Input:**

* A TSV-formatted normalized counts table of all samples

**Output:**

* A PNG-formatted image of two selected axes of the PCA




Notes
-----

Parameters:

* conditions: List of conditions to color the PCA points
* prefix: The output file prefix (_PCXX_PCYY.png will be added)
* legend_position: The position of the legend and title
* axes: the axis to plot



Authors
-------

* Thibault Dayris


Code
----

.. code-block:: python

    #!/usr/bin/python3.8
    # conding: utf-8

    """
    Plot a PCA
    """

    __author__ = "Thibault Dayris"
    __copyright__ = "Copyright 2020, Thibault Dayris"
    __email__ = "thibault.dayris@gustaveroussy.fr"
    __license__ = "MIT"

    import itertools
    import logging
    import matplotlib
    import matplotlib.pyplot
    import numpy
    import pandas
    import seaborn
    import sklearn.decomposition


    from os.path import basename, dirname, commonprefix
    from snakemake.utils import makedirs

    logging.basicConfig(
        # filename=snakemake.log[0],
        filemode="w",
        level=logging.DEBUG
    )

    # Load data and remove text annotations
    data = pandas.read_csv(
        snakemake.input["counts"],
        sep="\t",
        header=0,
        index_col=0
    )
    data = data[list(data.select_dtypes(include=[numpy.number]).columns.values)]
    data.dropna(axis=1, how='all', inplace=True)
    logging.debug("Head of data counts:")
    logging.debug(data.head())

    condition_dict = snakemake.params.conditions
    logging.debug("List of conditions per sample:")
    logging.debug(condition_dict)

    # Perform PCA
    nbc = len(data.columns.tolist())
    skpca = sklearn.decomposition.PCA(n_components=nbc)

    # Prepare plots
    sktransform = skpca.fit_transform(data.T)
    skvar = skpca.explained_variance_ratio_
    results = pandas.DataFrame(
        sktransform,
        columns=[f"PC{i}" for i in range(1, nbc+1, 1)],
        index=data.columns.tolist()
    )
    logging.debug("PCA results")
    logging.debug(results)

    seaborn.set(style="darkgrid")
    output_prefix = snakemake.params.get("prefix", "pca")
    legend_position = snakemake.params.get("legend_position", "upper center")
    axes = snakemake.params.get("axes", range(1, 4, 1))
    for ax1, ax2 in itertools.permutations(axes, 2):
        results["Conditions"] = [
            condition_dict[i] for i in results.index
        ]

        g = seaborn.FacetGrid(
            results,
            hue="Conditions",
            height=13
        )

        name_ax1 = f"PC{ax1}"
        skvar_ax1 = skvar[ax1 - 1] * 100
        name_ax2 = f"PC{ax2}"
        skvar_ax2 = skvar[ax2 - 1] * 100
        logging.info(f"Building plot: {output_prefix}_{name_ax1}_{name_ax2}.png")

        g = g.map(
            matplotlib.pyplot.scatter,
            name_ax1,
            name_ax2,
            s=50
        )

        matplotlib.pyplot.title(
            f"{name_ax1} ({skvar_ax1:.2f}) and {name_ax2} {skvar_ax2:.2f}"
        )

        if snakemake.params.get("samples_names", False) is True:
            points_coordinates = zip(
                results.index.tolist(),
                results[name_ax1],
                results[name_ax2]
            )

            for label, x, y in points_coordinates:
                matplotlib.pyplot.annotate(
                    label,
                    xy=(x, y),
                    xytext=(-5, -5),
                    textcoords="offset points",
                    ha="center",
                    va="top"
                )

        frame = (matplotlib.pyplot
                           .legend(loc=legend_position, frameon=True)
                           .get_frame())
        frame.set_facecolor("white")

        matplotlib.pyplot.savefig(
            f"{output_prefix}_{name_ax1}_{name_ax2}.png",
            bbox_inches="tight"
        )
    logging.info("Process over")


.. |nl| raw:: html

   <br>
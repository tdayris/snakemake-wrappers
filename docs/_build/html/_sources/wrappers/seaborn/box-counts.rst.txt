.. _`bio/seaborn/box-counts`:

SEABORN BOX PLOTS
=================

Build a count box-plot

**URL**: 

Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule test_box_count:
        input:
            counts = "table.tsv"
        output:
            png = "plot.png"
        message:
            "Testing boxp lot of normalized counts"
        threads:
            1
        resources:
            mem_mb = (
                lambda wildcards, attempt: min(attempt * 512, 10240)
            ),
            time_min = (
                lambda wildcards, attempt: min(attempt * 5, 200)
            )
        log:
            "logs/test_box_count.log"
        wrapper:
            "0.50.4-2418-g8fefa1e53/bio/seaborn/box-counts"


    rule test_box_count_drop_null:
        input:
            counts = "table.tsv"
        output:
            png = "plot_null_dropped.png"
        message:
            "Testing boxp lot of normalized counts"
        threads:
            1
        resources:
            mem_mb = (
                lambda wildcards, attempt: min(attempt * 512, 10240)
            ),
            time_min = (
                lambda wildcards, attempt: min(attempt * 5, 200)
            )
        params:
            drop_null = True
        log:
            "logs/test_box_count.log"
        wrapper:
            "0.50.4-2418-g8fefa1e53/bio/seaborn/box-counts"

Note that input, output and log file paths can be chosen freely.

When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``conda-forge:python=3.8.2``
* ``conda-forge:pandas=1.0.1``
* ``conda-forge:numpy=1.18.1``
* ``conda-forge:seaborn=0.10.0``
* ``conda-forge:matplotlib=3.1.3``
* ``conda-forge:pillow=7.0.0``
* ``conda-forge:pyqt=5.12.3``

Input/Output
------------
**Input:**

* A TSV-formatted normalized counts table of all samples

**Output:**

* A PNG-formatted image of the clustered heatmap




Notes
-----

Parameters:

* drop_null: Remove lines full of zeros or NaNs



Authors
-------

* Thibault Dayris


Code
----

.. code-block:: python

    #!/usr/bin/python3.8
    # conding: utf-8

    __author__ = "Thibault Dayris"
    __copyright__ = "Copyright 2020, Thibault Dayris"
    __email__ = "thibault.dayris@gustaveroussy.fr"
    __license__ = "MIT"

    """
    Plot a box plot of each sample counts
    """

    import logging
    import matplotlib
    import matplotlib.pyplot
    import numpy
    import pandas
    import seaborn

    from os.path import basename, dirname
    from snakemake.utils import makedirs

    logging.basicConfig(
        filename=snakemake.log[0],
        filemode="w",
        level=logging.DEBUG
    )

    # Build output directory if necessary
    if (outdir := basename(dirname(snakemake.output["png"]))) != "":
        makedirs(outdir)
        logging.debug(f"Directory: '{outdir}' created.")

    # Load normalized counts
    data = pandas.read_csv(
        snakemake.input["counts"],
        sep="\t",
        header=0,
        index_col=0
    )

    # Remove possible text annotations and validate
    data = data[list(data.select_dtypes(include=[numpy.number]).columns.values)]

    drop_null = snakemake.params.get("drop_null", False)
    if drop_null is True:
        data = data.loc[~(data == 0).all(axis=1)]
        data.dropna(axis=0, how="all", inplace=True)

    # Stack values in order to plot counts
    data = pandas.DataFrame(data.stack())
    data.reset_index(inplace=True)
    data.columns = ["Target_id", "Sample", "Normalized_Counts"]

    logging.debug("Head of the post-processed dataframe:")
    logging.debug(data.head())

    seaborn.set(
        style="ticks",
        palette="pastel"
    )

    seaborn.boxplot(
        y = "Sample",
        x = "Normalized_Counts",
        data = data,
        orient="h"
    )

    seaborn.despine(
        offset = 10,
        trim = True
    )

    matplotlib.pyplot.savefig(
        snakemake.output["png"],
        bbox_inches="tight"
    )
    logging.debug("Process over.")


.. |nl| raw:: html

   <br>
.. _`bio/seaborn/pval-histogram`:

P-VALUE HISTOGRAM
=================

Plot an adjusted P-Value Histogram

**URL**: 

Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule test_pval_hist:
        input:
            deseq2 = "table.tsv"
        output:
            png = "plot.png"
        message:
            "Testing pval histogramm"
        threads:
            1
        resources:
            mem_mb = (
                lambda wildcards, attempt: min(attempt * 1024, 10240)
            ),
            time_min = (
                lambda wildcards, attempt: min(attempt * 20, 200)
            )
        log:
            "logs/test_pval_hist.log"
        wrapper:
            "0.50.4-2418-g8fefa1e53/bio/seaborn/pval-histogram"

Note that input, output and log file paths can be chosen freely.

When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``conda-forge:python=3.8.2``
* ``conda-forge:pandas=1.0.1``
* ``conda-forge:numpy=1.18.1``
* ``conda-forge:seaborn=0.10.0``
* ``conda-forge:matplotlib=3.1.3``
* ``conda-forge:pillow=7.0.0``
* ``conda-forge:sklearn-contrib-lightning=0.5.0``
* ``conda-forge:pyqt=5.12.3``

Input/Output
------------
**Input:**

* A TSV-formatted deseq2 result

**Output:**

* A PNG-formatted image of the pvalue repartition





Authors
-------

* Thibault Dayris


Code
----

.. code-block:: python

    #!/usr/bin/python3.8
    # conding: utf-8

    """
    Plot a pvalue histogram
    """

    __author__ = "Thibault Dayris"
    __copyright__ = "Copyright 2020, Thibault Dayris"
    __email__ = "thibault.dayris@gustaveroussy.fr"
    __license__ = "MIT"

    import logging
    import matplotlib
    import matplotlib.pyplot
    import numpy
    import pandas
    import seaborn

    from os.path import join, basename, dirname
    from snakemake.utils import makedirs

    logging.basicConfig(
        filename=snakemake.log[0],
        filemode="w",
        level=logging.DEBUG
    )

    # Build output directory if necessary
    if (outdir := basename(dirname(snakemake.output["png"]))) != "":
        makedirs(outdir)
        logging.debug(f"Directory '{outdir}' created")


    # Load dataset
    data = pandas.read_csv(
        snakemake.input["deseq2"],
        sep="\t",
        header=0,
        index_col=0
    )
    data = data["padj"]

    # Build intervals
    data = data.value_counts(
        bins = 20,
        dropna = True,
        ascending = False,
        sort = False
    )
    logging.debug("Head of pval bins:")
    logging.debug(data.head())

    # Build graph
    seaborn.set(
        style="darkgrid",
        color_codes="muted"
    )
    f = seaborn.barplot(
        x = data.index,
        y = data.values,
        color = "b"
    )

    f.axes.get_xaxis().set_visible(False)


    matplotlib.pyplot.savefig(
        snakemake.output["png"],
        bbox_inches="tight"
    )
    logging.info("Process over")


.. |nl| raw:: html

   <br>
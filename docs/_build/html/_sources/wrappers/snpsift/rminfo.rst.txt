.. _`bio/snpsift/rminfo`:

SNPSIFT RM INFO
===============

Convert from VCF to TSV with `SnpSift <https://pcingola.github.io/SnpEff/ss_rminfo/>`_

**URL**: https://pcingola.github.io/SnpEff/ss_rminfo/

Example
-------

This wrapper can be used in the following way:

.. code-block:: python



Note that input, output and log file paths can be chosen freely.

When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``snpsift==5.1``
* ``snakemake-wrapper-utils==0.4.1``
* ``htslib=1.15.1``

Input/Output
------------
**Input:**

* VCF file to remove the given info fields

**Output:**

* VCF file with given info field removed



Params
------

* ``extra``: Extra parameters

* ``rminfo``: List of info fields to remove





Authors
-------

* Thibault Dayris


Code
----

.. code-block:: python

    """Snakemake wrapper for SnpSift rminfo"""

    __author__ = "Thibault Dayris"
    __copyright__ = "Copyright 2022, Dayris Thibault"
    __email__ = "thibault.dayris@gustaveroussy.fr"
    __license__ = "MIT"

    from snakemake.shell import shell
    from snakemake_wrapper_utils.java import get_java_opts

    java_opts = get_java_opts(snakemake)

    log = snakemake.log_fmt_shell(stdout=False, stderr=True)
    extra = snakemake.params.get("extra", "")
    min_threads = 1

    incall = snakemake.input["call"]
    if snakemake.input["call"].endswith("bcf"):
        min_threads += 1
        incall = "< <(bcftools view {})".format(incall)
    elif snakemake.input["call"].endswith("gz"):
        min_threads += 1
        incall = "< <(gunzip -c {})".format(incall)

    outcall = snakemake.output["call"]
    if snakemake.output["call"].endswith("gz"):
        min_threads += 1
        outcall = "| gzip -c > {}".format(outcall)
    elif snakemake.output["call"].endswith("bcf"):
        min_threads += 1
        outcall = "| bcftools view > {}".format(outcall)
    else:
        outcall = "> {}".format(outcall)

    if snakemake.threads < min_threads:
        raise ValueError(
            "At least {} threads required, {} provided".format(
                min_threads, snakemake.threads
            )
        )

    shell(
        "SnpSift rminfo"  # Tool and its subcommand
        " {java_opts} {extra}"  # Extra parameters
        " {params.rminfo}"  # Info field to remove
        " {incall} "  # Path to input vcf file
        " {outcall} "  # Path to output vcf file
        " {log}"  # Logging behaviour
    )


.. |nl| raw:: html

   <br>
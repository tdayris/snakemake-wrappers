.. _`bio/variantoccurence/annotate`:

VARIANT OCCURENCE ANNOTATE
==========================

Annotate a VCF with a given occurence of variant

**URL**: 

Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule test_variant_occurence_annotate:
        input:
            calls = ["in.vcf", "in2.vcf"],
            occurence = "occurence.txt"
        output:
            calls = ["in.occ.vcf", "in.2.occ.vcf"]
        log:
            "log/variantoccurence/annotate.log"
        wrapper:
            "0.50.4-2418-g8fefa1e53/bio/variantoccurence/annotate"

Note that input, output and log file paths can be chosen freely.

When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``py-bgzip==0.4.0``

Input/Output
------------
**Input:**

* ``occurence``: A TSV-formatted file counting occurence of a list of variants
* ``calls``: A list of VCF-formatted variants to annotate

**Output:**

* ``calls``: List of annotated VCF in the exact same order as the input




Notes
-----

Output VCF must be uncompressed



Authors
-------

* Thibault Dayris


Code
----

.. code-block:: python

    """Snakemake wrapper to annotate variant occurence"""

    __author__ = "Thibault Dayris"
    __copyright__ = "Copyright 2021, Dayris Thibault"
    __email__ = "thibault.dayris@gustaveroussy.fr"
    __license__ = "MIT"


    import bgzip
    import datetime
    import logging

    logging.basicConfig(
        filename=snakemake.log[0],
        filemode="w",
        level=logging.INFO
    )

    def annotate_vcf(inv: str, outv: str, occurence: dict[str, int]) -> None:
        """
        Use occurence to annotate VCF
        """
        logging.info(f"Working on {inv}")
        with open(inv, "r") as invcf, open(outv, 'w') as outvcf:
            for line in invcf:
                if line.startswith("##"):
                    # Base header, nothing to do
                    pass

                elif line.startswith("#"):
                    # End of header, our new header must be added
                    outvcf.write(header)

                else:
                    chomp = line.split("\t")
                    var_occ = occurence.get(":".join(chomp[0:5]), "0")
                    if chomp[7] == ".":
                        chomp[7] = f"VarOcc={var_occ}"
                    else:
                        chomp[7] += f";VarOcc={var_occ}"

                    line = "\t".join(chomp)

                outvcf.write(line)


    def build_occurence_dict(occ_path: str) -> dict[str, int]:
        """
        From a text file, build the occurence dict
        """
        occurences = {}
        with open(occ_path) as occ_stream:
            for line in occ_stream:
                occ, chr, pos, id, ref, alt = line[:-1].split("\t")
                occurences[f"{chr}:{pos}:{id}:{ref}:{alt}"] = occ
        logging.debug("Variant occurences within cohort loaded")
        return occurences

    version = 1.0
    name = "VariantOccurence/Annotate"
    url = f"github.com/tdayris/snakemake-wrappers/tree/Unofficial/bio/variantoccurence/{name}/wrapper.py"
    header = f"""##BiGRCommandLine=<ID={name},CommandLine="{url}",Version={version},Date={datetime.date.today()}>\n"""
    header += """##INFO=<ID=VarOcc,Number=1,Type=Integer,Description="Number of sample havin the variant among the provided cohort">\n"""

    occ_dict = build_occurence_dict(snakemake.input["occurence"])
    for incall, outcall in zip(snakemake.input["calls"], snakemake.output["calls"]):
        annotate_vcf(incall, outcall, occ_dict)


.. |nl| raw:: html

   <br>
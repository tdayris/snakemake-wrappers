.. _`bio/bcftools/query`:

BCFTOOLS_QUERY
==============

Extracts fields from VCF or BCF files and outputs them in user-defined format. See `BCFtools documentation <https://www.htslib.org/doc/bcftools.html#query>`_.

**URL**: 

Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule test_bcftools_query_to_bed:
        input:
            "a.bcf"
        output:
            bed = "a.bed"
        wrapper:
            "0.50.4-2418-g8fefa1e53/bio/bcftools/query"


    rule test_bcftools_query_sample_list:
        input:
            "a.bcf"
        output:
            sample_list="a.samples.list"
        wrapper:
            "0.50.4-2418-g8fefa1e53/bio/bcftools/query"


    rule test_bcftools_query:
        input:
            "a.bcf"
        output:
            "a.query.tsv"
        params:
            extra="-f 'GQ:[ %GQ] \t GT:[ %GT]\n'"
        wrapper:
            "0.50.4-2418-g8fefa1e53/bio/bcftools/query"

Note that input, output and log file paths can be chosen freely.

When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``bcftools==1.12``

Input/Output
------------
**Input:**

* Indexed gzipped VCF or BCF file

**Output:**

* Query result in expected format




Notes
-----

If output is labelled "sample_list", then "-l" is sent to bcftools query and no other options are needed

If output is labelled "bed", then "-f'%CHROM\t%POS0\t%END\t%ID\n'" will be set as extra paramerters and no options are needed.



Authors
-------

* Thibault Dayris


Code
----

.. code-block:: python

    #!/usr/bin/python3
    # -*- coding: utf-8 -*-

    """This is the Snakemake Wrapper for bcftools query"""

    __author__ = "Thibault Dayris"
    __copyright__ = "Copyright 2021, Thibault Dayris"
    __email__ = "thibault.dayris@gustaveroussy.fr"
    __license__ = "MIT"

    from snakemake.shell import shell
    log = snakemake.log_fmt_shell(stdout=False, stderr=True)

    extra = snakemake.params.get("extra", "")
    output = snakemake.output[0]
    call = snakemake.input[0]

    if "sample_list" in snakemake.output.keys():
        extra = "-l"
        output = snakemake.output["sample_list"]

    elif "bed" in snakemake.output.keys():
        extra = "-f'%CHROM\t%POS0\t%END\t%ID\n'"
        output = snakemake.output["bed"]

    shell(
        "bcftools query "
        "{extra} "
        "{call} "
        "> {output} "
        "{log}"
    )


.. |nl| raw:: html

   <br>
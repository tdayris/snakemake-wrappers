.. _`bio/bcftools/norm`:

BCFTOOLS NORM
=============

Left-align and normalize indels, check if REF alleles match the reference, split multiallelic sites into multiple rows; recover multiallelics from multiple rows. For more information see `BCFtools documentation <https://www.htslib.org/doc/bcftools.html#norm>`_.

**URL**: https://samtools.github.io/bcftools/bcftools.html#mpileup

Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule norm_vcf:
        input:
            "{prefix}.vcf"
        output:
            "{prefix}.vcf"
        params:
            ""  # optional parameters for bcftools norm (except -o)
        wrapper:
            "0.50.4-2418-g8fefa1e53/bio/bcftools/norm"

Note that input, output and log file paths can be chosen freely.

When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``bcftools=1.12``

Input/Output
------------
**Input:**

* ``call``: Path to gzipped VCF or BCF, must be the first in the input file list
* ``region``: Optional region BED/GTF file
* ``fasta``: Required sequence file

**Output:**

* normalized VCF/BCF, must be the first output element



Params
------

* ``Optional parameters, ust be the first and only value in snakemake's params.``: 





Authors
-------

* Dayne Filer


Code
----

.. code-block:: python

    __author__ = "Dayne Filer"
    __copyright__ = "Copyright 2019, Dayne Filer"
    __email__ = "dayne.filer@gmail.com"
    __license__ = "MIT"


    from snakemake.shell import shell
    log = snakemake.log_fmt_shell(stdout=True, stderr=True)

    extra = snakemake.params.get("extra", "")
    fasta = ""
    if "fasta" in snakemake.input.keys():
        fasta = "--fasta-ref {}".format(snakemake.input["fasta"])

    output_type = "--output-type "
    if snakemake.output[0].endswith("bcf"):
        output_type += "b"
    elif snakemake.output[0].endswith("vcf"):
        output_type += "v"
    elif snakemake.output[0].endswith("vcf.gz"):
        output_type += "z"
    else:
        output_type = "u"

    region = ""
    if "region" in snakemake.input.keys():
        region = "--regions {}".format(snakemake.input["region"])

    shell(
        "bcftools norm {extra} {region} {fasta} "
        "{output_type} --threads {snakemake.threads} "
        "{snakemake.input.call} -o {snakemake.output[0]} {log}"
    )


.. |nl| raw:: html

   <br>
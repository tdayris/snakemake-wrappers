.. _`bio/sigprofiler/decompose`:

SIGPROFILER DECOMPOSE
=====================

Decomposes the De Novo Signatures into COSMIC Signatures and assigns COSMIC signatures into samples

**URL**: 

Example
-------

This wrapper can be used in the following way:

.. code-block:: python



Note that input, output and log file paths can be chosen freely.

When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``cudatoolkit==11.5.0``
* ``pytorch==1.10.0``
* ``pip==21.3.1``
* ``{'pip':['SigProfilerMatrixGenerator','SigProfilerSimulator','SigProfilerExtractor','SigProfilerPlotting']}``

Input/Output
------------
**Input:**

* ``signatures``: Path to SigProfilerExtractor result directory

**Output:**

* ``csv``: A csv file that contains the statistics of all solutions.
* ``pdf``: A plot that depict the Stability and Mean Sample Cosine Distance for different solutions.



Params
------

* ``all_solution``: Default is "All_Solutions". Path to a folder that contains the results of all solutions.

* ``base_csvfile``: Default is "All_solutions_stat.csv". Path to a csv file that contains the statistics of all solutions.

* ``genomes``: Default is Samples.txt. Path to a tab delimilted file that contains the mutation counts for all genomes given to different mutation types.

* ``estimate_extra``: Extra parameters for estimate_solution




Notes
-----

notes



Authors
-------

* Thibault Dayris


Code
----

.. code-block:: python

    #!/usr/bin/env python3
    # -*- coding: utf-8 -*-

    """This wrapper estimates best solutions from SigProfilerExtractor results"""


    import logging
    import os

    from os import path
    from snakemake.utils import makedirs
    from snakemake.shell import shell
    from tempfile import TemporaryDirectory

    from SigProfilerExtractor import estimate_best_solution as ebs

    log = snakemake.log_fmt_shell(stdout=True, stderr=True, append=True)

    logging.basicConfig(
        #filename=snakemake.log[0],
        filemode="w",
        level=logging.DEBUG
    )

    logging.info("Building expected directory structure")
    with TemporaryDirectory() as tempdir:
        signatures_name = path.basename(snakemake.input["signatures"])

        os.symlink(
            snakemake.input["signatures"]
            path.join(tempdir, signatures_name)
        )

        ebs.estimate_solution(
            base_csvfile=snakemake.params.get("base_csvfile", "All_solutions_stat.csv"),
            All_solution=snakemake.params.get("all_solution", "All_Solutions"),
            genomes=snakemake.params.get("genomes", "Samples.txt"),
            output="results",
            **snakemake.params.get("estimate_extra", {})
        )

        logging.info("Retrieving results")
        csv = path.sep.join([
            tempfile,
            snakemake.params.get("all_solution", "All_Solutions"),
            "results",
            "All_solutions_stat.csv"
        ])

        shell(
            "rsync "
            "--verbose "
            "--checksum "
            "--recursive "
            "--update "
            "--links "
            "--partial "
            "--progress "
            "--human-readable "
            "{csv} "
            "{snakemake.output['csv']} "
            "{log}"
        )

        pdf = path.sep.join([
            tempfile,
            snakemake.params.get("all_solution", "All_Solutions"),
            "results",
            "selection_plot.pdf"
        ])

        shell(
            "rsync "
            "--verbose "
            "--checksum "
            "--recursive "
            "--update "
            "--links "
            "--partial "
            "--progress "
            "--human-readable "
            "{pdf} "
            "{snakemake.output['pdf']} "
            "{log}"
        )


.. |nl| raw:: html

   <br>
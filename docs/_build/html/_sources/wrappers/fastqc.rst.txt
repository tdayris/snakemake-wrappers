.. _`bio/fastqc`:

FASTQC
======

Generate fastq qc statistics using fastqc.


**URL**: https://www.bioinformatics.babraham.ac.uk/projects/fastqc/

Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule fastqc:
        input:
            "reads/{sample}.fastq"
        output:
            html="qc/fastqc/{sample}.html",
            zip="qc/fastqc/{sample}_fastqc.zip" # the suffix _fastqc.zip is necessary for multiqc to find the file. If not using multiqc, you are free to choose an arbitrary filename
        params: "--quiet"
        log:
            "logs/fastqc/{sample}.log"
        threads: 1
        wrapper:
            "0.50.4-2418-g8fefa1e53/bio/fastqc"

Note that input, output and log file paths can be chosen freely.

When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``fastqc==0.11.9``

Input/Output
------------
**Input:**

* fastq file, this must be the first file in the input file list

**Output:**

* ``html``: html file containing statistics
* ``zip``: zip file containing statistics



Params
------

* ``Optional arguments, this must be the only parameters``: 





Authors
-------

* Julian de Ruiter


Code
----

.. code-block:: python

    """Snakemake wrapper for fastqc."""

    __author__ = "Julian de Ruiter"
    __copyright__ = "Copyright 2017, Julian de Ruiter"
    __email__ = "julianderuiter@gmail.com"
    __license__ = "MIT"


    from os import path
    import re
    from tempfile import TemporaryDirectory

    from snakemake.shell import shell
    from snakemake.utils import makedirs

    log = snakemake.log_fmt_shell(stdout=True, stderr=True)
    tmp = snakemake.resources.get('tmpdir')
    if tmp is not None:
        makedirs(tmp)


    def basename_without_ext(file_path):
        """Returns basename of file path, without the file extension."""

        base = path.basename(file_path)
        # Remove file extension(s) (similar to the internal fastqc approach)
        base = re.sub("\\.gz$", "", base)
        base = re.sub("\\.bz2$", "", base)
        base = re.sub("\\.txt$", "", base)
        base = re.sub("\\.fastq$", "", base)
        base = re.sub("\\.fq$", "", base)
        base = re.sub("\\.sam$", "", base)
        base = re.sub("\\.bam$", "", base)

        return base


    # Run fastqc, since there can be race conditions if multiple jobs
    # use the same fastqc dir, we create a temp dir.
    with TemporaryDirectory(dir=tmp) as tempdir:
        shell(
            "fastqc {snakemake.params} -t {snakemake.threads} "
            "--outdir {tempdir:q} {snakemake.input[0]:q}"
            " {log}"
        )

        # Move outputs into proper position.
        output_base = basename_without_ext(snakemake.input[0])
        html_path = path.join(tempdir, output_base + "_fastqc.html")
        zip_path = path.join(tempdir, output_base + "_fastqc.zip")

        if snakemake.output.html != html_path:
            shell("mv {html_path} {snakemake.output.html}")

        if snakemake.output.zip != zip_path:
            shell("mv {zip_path} {snakemake.output.zip}")


.. |nl| raw:: html

   <br>
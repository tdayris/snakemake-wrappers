.. _`bio/microphaser/build_reference`:

MICROPHASER BUILD_REFERENCE
===========================

Create a reference of all normal peptides in a sample


**URL**: 

Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule microphaser_build:
        input:
            # all normal peptides from the complete proteome as nucleotide sequences
            ref_peptides="germline/peptides.fasta",
        output:
            # a binary of the normal peptides amino acid sequences
            bin="out/peptides.bin",
            # the amino acid sequences in FASTA format
            peptides="out/peptides.fasta",
        log:
            "logs/microphaser/build_reference.log"
        params:
            extra="--peptide-length 9",  # optional, desired peptide length in amino acids.
        wrapper:
            "0.50.4-2418-g8fefa1e53/bio/microphaser/build_reference"

Note that input, output and log file paths can be chosen freely.

When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``microphaser=0.4``

Input/Output
------------
**Input:**

* peptide reference (nucleotide sequences from microphaser germline)

**Output:**

* peptide reference in amino acid FASTA format
* binary peptide reference for filtering




Notes
-----

* For more information see, https://github.com/koesterlab/microphaser.



Authors
-------

* Jan Forster


Code
----

.. code-block:: python

    __author__ = "Jan Forster"
    __copyright__ = "Copyright 2021, Jan Forster"
    __license__ = "MIT"


    from snakemake.shell import shell

    extra = snakemake.params.get("extra", "")
    log = snakemake.log_fmt_shell(stdout=False, stderr=True)

    shell(
        "microphaser build_reference "
        "{extra} "
        "--reference {snakemake.input.ref_peptides} "
        "--output {snakemake.output.bin} "
        "> {snakemake.output.peptides} "
        "{log}"
    )


.. |nl| raw:: html

   <br>
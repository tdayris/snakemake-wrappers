.. _`bio/facets/cnv`:

CNV_FACETS
==========

Run cnv_facets

**URL**: 

Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule test_cnv_facets_bam:
        input:
            tumor_bam="tumor.bam",
            normal_bam="normal.bam",
            vcf="dbsnp.vcf.gz",
            vcf_index="dbsnp.vcf.gz.tbi"
        output:
            vcf="prefix.vcf.gz",
            profile="prefix.cnv.png",
            coverage="prefix.cov.pdf",
            spider="prefix.spider.pdf",
            pileup="prefix.csv.gz"
        params:
            extra=""
        wrapper:
            "0.50.4-2418-g8fefa1e53/bio/facets/cnv"


    rule test_cnv_facets_pileup:
        input:
            pileup="pileup.csv"
        output:
            vcf="prefix.vcf.gz",
            profile="prefix.cnv.png",
            coverage="prefix.cov.pdf",
            spider="prefix.spider.pdf",
            pileup="prefix.csv.gz"
        params:
            extra=""
        wrapper:
            "0.50.4-2418-g8fefa1e53/bio/facets/cnv"

Note that input, output and log file paths can be chosen freely.

When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``bioconda::cnv_facets==0.15.0``
* ``bioconda::samtools==1.9``

Input/Output
------------
**Input:**

* ``Bam input``: ['Bam formatted Tumor mapped reads', 'Bam formatted Normal mapped reads', 'Known VCF file']
* ``Pileup input``: ['Pileup with normal first, tumor in second']

**Output:**

* VCF formatted copy number variants
* PNG formatted CNV plot
* PNG formatted coverage plot
* PNG formatted spider plot
* CSV formatted Pileup if bam files were provided in input





Authors
-------

* Thibault Dayris


Code
----

.. code-block:: python

    #!/usr/bin/env python
    # -*- coding: utf-8 -*-


    """
    Snakemake wrapper for cnv_facets
    """

    __author__ = "Thibault Dayris"
    __copyright__ = "Copyright 2020, Thibault Dayris"
    __email__ = "thibault.dayris@gustaveroussy.fr"
    __license__ = "MIT"


    from snakemake.shell import shell
    log = snakemake.log_fmt_shell(stdout=True, stderr=True)

    extra = snakemake.params.get("extra", "")
    if "bed" in snakemake.input:
        extra += " --targets {input.bed}"

    vcf = ""
    if "vcf" in snakemake.input.keys():
        vcf = f"--snp-vcf {snakemake.input.vcf} "

    prefix = snakemake.output["vcf"][:-len(".vcf.gz")]

    if ("--no-cov-plot" in extra) and ("coverage" in snakemake.output.keys()):
        raise ValueError(
            "Coverage plot was deactivated in extra parameters, but "
            "expected as result. Remove the extra parameter or the "
            "coverage file in output."
        )

    if all(i in snakemake.input.keys() for i in ["tumor_bam", "normal_bam", "vcf"]):
        shell(
            "cnv_facets.R "
            "--snp-tumour {snakemake.input.tumor_bam} "
            "--snp-normal {snakemake.input.normal_bam} "
            "{vcf} "
            "--out {prefix} "
            "--snp-nprocs {snakemake.threads} "
            "{extra} "
            "{log}"
        )
    elif "pileup" in snakemake.input.keys():
        shell(
            "cnv_facets.R "
            "--pileup {snakemake.input.pileup} "
            "--out {snakemake.params.prefix} "
            "--snp-nprocs {snakemake.threads} "
            "{vcf} "
            "{extra} "
            "{log}"
        )
    else:
        raise KeyError(
            "Expecting either: a tumor and normal bam with reference VCF, "
            "or a pileup file."
        )


.. |nl| raw:: html

   <br>
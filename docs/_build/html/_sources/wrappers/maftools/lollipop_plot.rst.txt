.. _`bio/maftools/lollipop_plot`:

LOLLIPOP PLOT
=============

Draw lollipop plot from RDS-formatted maftools object

**URL**: 

Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule test_lillipop_plot:
        input:
            maf = "path/to/maf.RDS"
        output:
            png = "path/to/lollipopplot.png"
        params:
            png_extra = "",
            gene = "",
            lollipop_plot_extra = ""
        log:
            "logs/plot.log"
        wrapper:
            "0.50.4-2418-g8fefa1e53/maftools/lollipop_plot"

Note that input, output and log file paths can be chosen freely.

When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``bioconda::bioconductor-maftools==2.6.0``

Input/Output
------------
**Input:**

* ``maf``: Path to RDS formatted maftools object

**Output:**

* ``png``: Path to png file




Notes
-----

Use the "gene" wildcard to provide name of the gene of interest



Authors
-------

* Thibault Dayris


Code
----

.. code-block:: R

    #!/usr/bin/R

    # __author__ = "Thibault Dayris"
    # __copyright__ = "Copyright 2020, Thibault Dayris"
    # __email__ = "thibault.dayris@gustaveroussy.fr"
    # __license__ = "MIT"

    # Snakemake wrapper for lollipop plot

    base::library(package = "maftools", quietly = TRUE);

    # Building graphics environment command
    png_extra <- base::paste0(
      "filename", "='", base::as.character(x = snakemake@output[["png"]]), "'"
    );
    if ("png_extra" %in% base::names(snakemake@params)) {
      png_extra <- base::paste(
        png_extra, snakemake@params[["png_extra"]], sep = ", "
      );
    }

    png_cmd_line <- base::paste0("grDevices::png(", png_extra, ")");

    # Building trinucleotideMatrix computation command line
    maf_obj <- base::readRDS(
      file = base::as.character(x = snakemake@input[["maf"]])
    );

    lollipop_plot_extra = base::paste0(
      "maf=maf_obj, gene='",
      base::as.character(x=snakemake@wildcards[["gene"]]),
      "'"
    );

    if ("lollipop_plot_extra" %in% base::names(snakemake@params)) {
      lollipop_plot_extra <- base::paste(
        lollipop_plot_extra, snakemake@params[["lollipop_plot_extra"]],
        sep = ", "
      );
    }
    lollipop_plot_cmd_line <- base::paste0(
      "maftools::lollipopPlot(", lollipop_plot_extra, ")"
    );

    # Plotting signatures
    if ("png" %in% base::names(snakemake@output)) {
      base::message(png_cmd_line);
      base::message(lollipop_plot_cmd_line);
      base::eval(base::parse(text = png_cmd_line));
      base::eval(base::parse(text = lollipop_plot_cmd_line));
      dev.off();
    }


.. |nl| raw:: html

   <br>
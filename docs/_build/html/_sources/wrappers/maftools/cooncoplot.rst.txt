.. _`bio/maftools/cooncoplot`:

CO-ONCOPLOT
===========

Plot co-oncoplot based on two cohorts

**URL**: https://bioconductor.org/packages/release/bioc/vignettes/maftools/inst/doc/maftools.html#952_Co-onco_plots

Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule test_cooncoplot:
        input:
            maf1 = "path/to/maf1.RDS",
            maf2 = "path/to/maf2.RDS"
        params:
            cooncoplot_extra = "",
            png_extra = "",
        output:
            png = "path/to/cooncoplot.png"
        wrapper:
            "0.50.4-2418-g8fefa1e53/bio/maftools/cooncoplot"

Note that input, output and log file paths can be chosen freely.

When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``bioconda::bioconductor-maftools==2.6.0``

Input/Output
------------
**Input:**

* ``maf``: List of two maf RDS-formatted files

**Output:**

* ``png``: PNG formatted co-oncoplot plot





Authors
-------

* Thibault Dayris


Code
----

.. code-block:: R

    #!/usr/bin/R

    # __author__ = "Thibault Dayris"
    # __copyright__ = "Copyright 2020, Thibault Dayris"
    # __email__ = "thibault.dayris@gustaveroussy.fr"
    # __license__ = "MIT"

    # Snakemake wrapper for maftools co-oncoplot

    base::library(package="maftools", quietly=TRUE);


    maf_paths <- sapply(
      mafrds, function(p) base::as.character(x=p)
    );

    maf_names <- sapply(
      mafnames, function(n) base::as.character(x=n)
    );

    maf_objs <- sapply(
      maf, function(m) base::readRDS(m)
    );
    base::message("MAF loaded");

    compare_extra <- "m1=maf_obj[1], m2=maf_obj[2], m1Name=maf_names[1], m2Name=maf_names[2]";
    if ("cooncoplot_extra" %in% base::names(snakemake@params)) {
      cooncoplot_extra <- base::paste(
        cooncoplot_extra,
        base::names(snakemake@params[["cooncoplot_extra"]]),
        sep=", "
      );
    }
    cooncoplot_cmd <- base::paste0(
      "maftools::mafCompare(", cooncoplot_extra, ")"
    );

    png_extra <- base::paste0(
      "filename", "='", base::as.character(x = snakemake@output[["png"]]), "'"
    );
    if ("png_extra" %in% base::names(snakemake@params)) {
      png_extra <- base::paste(
        png_extra, snakemake@params[["png_extra"]], sep = ", "
      );
    }
    png_cmd_line <- base::paste0("grDevices::png(", png_extra, ")");
    base::message(png_cmd_line);
    base::message(cooncoplot_cmd);

    base::eval(base::parse(text=png_cmd_line));
    base::eval(base::parse(text=cooncoplot_cmd));
    dev.off();


.. |nl| raw:: html

   <br>
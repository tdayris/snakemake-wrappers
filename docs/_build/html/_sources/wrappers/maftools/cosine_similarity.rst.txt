.. _`bio/maftools/cosine_similarity`:

SIGNATURES
==========

Extrat given signature from a trinucleotide matrix,
compare them and plot cosine similarities with `maftools <https://bioconductor.org/packages/release/bioc/html/maftools.html>`_


**URL**: 

Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule test_maftools_cosine_similarity:
        input:
            rds = "signatures.RDS"
        output:
            png = "results/cosine.png",
            tsv = "results/cosine.tsv",
            rds = "results/cosine.RDS"
        params:
            extract_sig_extra = "n=2"
        wrapper:
            "0.50.4-2418-g8fefa1e53/bio/maftools/cosine_similarity"

Note that input, output and log file paths can be chosen freely.

When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``bioconda::bioconductor-maftools==2.6.0``
* ``conda-forge::r-pheatmap==1.0.12``
* ``conda-forge::r-nmf==0.21.0``

Input/Output
------------
**Input:**

* A RDS-formatted trinucleotide matrix file

**Output:**

* An optional RDS-formatted compared signature
* An optional TSV-formatted compared signature
* An optional PNG-formatted cosine similarity heatmap




Notes
-----

For input, see maftools/signatures

Use "compare_extra" to provide parameters to `maftools::compareSignatures`,
and "png_extra" to provide extra parameters to `grDevices::png`.



Authors
-------

* Thibault Dayris


Code
----

.. code-block:: R

    #!/usr/bin/R

    # __author__ = "Thibault Dayris"
    # __copyright__ = "Copyright 2020, Thibault Dayris"
    # __email__ = "thibault.dayris@gustaveroussy.fr"
    # __license__ = "MIT"

    # Snakemake wrapper for both maftools compareSignatures,
    # and pheatmap cosine similarity

    base::library(package = "maftools", quietly = TRUE);
    base::library(package = 'pheatmap', quietly = TRUE);
    base::library(package = "NMF", quietly = TRUE);

    # Building and running signature comparison
    maf.sig <- base::readRDS(
      file = base::as.character(x = snakemake@input[["rds"]])
    )
    comp_sig_extra <- "nmfRes = maf.sig";
    if ("comp_sig_extra" %in% base::names(snakemake@params)) {
      comp_sig_extra <- base::paste(
        comp_sig_extra, snakemake@params[["comp_sig_extra"]], sep = ", "
      );
    }
    sig_cmd_line <- base::paste0(
      "maftools::compareSignatures(",
      comp_sig_extra,
      ")"
    );
    maf.comp <- base::eval(base::parse(text = sig_cmd_line));
    head(maf.comp)

    # Building graphics environment command
    png_extra <- base::paste0(
      "filename", "='", base::as.character(x = snakemake@output[["png"]]), "'"
    );
    if ("png_extra" %in% base::names(snakemake@params)) {
      png_extra <- base::paste(
        png_extra, snakemake@params[["png_extra"]], sep = ", "
      );
    }
    png_cmd_line <- base::paste0("grDevices::png(", png_extra, ")");
    base::message(png_cmd_line);
    base::eval(base::parse(text = png_cmd_line));

    # Plotting cosine similarities
    pheatmap::pheatmap(
      mat = maf.comp$cosine_similarities,
      cluster_rows = FALSE,
      main = "Cosine similarity against validated signatures"
    );
    dev.off();

    # Saving results
    if ("tsv" %in% base::names(snakemake@output)) {
      utils::write.table(
        x = maf.comp,
        file = base::as.character(x = snakemake@output[["tsv"]]),
        sep = "\t",
        quote = FALSE
      );
    }

    if ("rds" %in% base::names(snakemake@output)) {
      base::saveRDS(
        file = base::as.character(x = snakemake@output[["rds"]]),
        obj = maf.comp
      );
    }


.. |nl| raw:: html

   <br>
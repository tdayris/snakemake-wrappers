.. _`bio/maftools/plotmafsummary`:

PLOT_MAF_SUMMARY
================

Plot multiple metrics on a MAF file with `maftools <https://bioconductor.org/packages/release/bioc/html/maftools.html>`_

**URL**: 

Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule test_maftools_plotmafsummary:
        input:
            rds = "maf.RDS"
        output:
            png = "results/plotmafSummary.png"
        wrapper:
            "0.50.4-2418-g8fefa1e53/bio/maftools/plotmafsummary"

Note that input, output and log file paths can be chosen freely.

When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``bioconda::bioconductor-maftools==2.6.0``

Input/Output
------------
**Input:**

* A RDS-formatted maftools object

**Output:**

* A PNG-formatted summary plot




Notes
-----

Use "maftools_extra" to provide parameters to `maftools::plotmafSummary`, and
"png_extra" to provide extra parameters to `grDevices::png`.



Authors
-------

* Thibault Dayris


Code
----

.. code-block:: R

    #!/usr/bin/R

    # __author__ = "Thibault Dayris"
    # __copyright__ = "Copyright 2020, Thibault Dayris"
    # __email__ = "thibault.dayris@gustaveroussy.fr"
    # __license__ = "MIT"

    # Snakemake wrapper for maftools plotmafSummary

    base::library(package = "maftools", quietly = TRUE);

    # Building graphics environment command
    png_extra <- base::paste0(
      "filename", "='", base::as.character(x = snakemake@output[["png"]]), "'"
    );
    if ("png_extra" %in% base::names(snakemake@params)) {
      png_extra <- base::paste(
        png_extra, snakemake@params[["png_extra"]], sep = ", "
      );
    }

    colors <- NULL;
    if ("color_named_vector" %in% base::names(snakemake@params)) {
      vc_nonSyn <- snakemake@params[["non_synonymous"]];
      colors <- snakemake@params[["color_named_vector"]];
      names(colors) <- vc_nonSyn;
      print(colors);
    }

    png_cmd_line <- base::paste0("grDevices::png(", png_extra, ")");
    base::message(png_cmd_line);

    # Building maftools::plotmafSummary command
    maf_obj <- base::readRDS(
      file = base::as.character(x = snakemake@input[["rds"]])
    );

    maftools_extra <- "maf = maf_obj, color = colors";
    if ("maftools_extra" %in% base::names(snakemake@params)) {
      maftools_extra <- paste(
        maftools_extra, snakemake@params[["maftools_extra"]], sep = ", "
      );
    }
    maf_cmd_line <- base::paste0("maftools::plotmafSummary(", maftools_extra, ")");
    base::message(maf_cmd_line);

    # Running both command lines
    base::eval(base::parse(text = png_cmd_line));
    base::eval(base::parse(text = maf_cmd_line));
    dev.off();


.. |nl| raw:: html

   <br>
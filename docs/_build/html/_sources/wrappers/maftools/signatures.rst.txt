.. _`bio/maftools/signatures`:

SIGNATURES
==========

Extrat given signature from a trinucleotide matrix,
compare them and plot cosine similarities with `maftools <https://bioconductor.org/packages/release/bioc/html/maftools.html>`_


**URL**: 

Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule test_maftools_signatures:
        input:
            rds = "tnm.RDS"
        output:
            png = "results/signatures.png",
            rds = "results/signatures.RDS"
        params:
            sig_extra = "n=2"
        wrapper:
            "0.50.4-2418-g8fefa1e53/bio/maftools/signatures"

Note that input, output and log file paths can be chosen freely.

When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``bioconda::bioconductor-maftools==2.6.0``
* ``conda-forge::r-nmf==0.21.0``

Input/Output
------------
**Input:**

* A RDS-formatted trinucleotide matrix object

**Output:**

* An optional RDS-formatted extracted-signatures file
* An optional PNG-formatted extracted-signatures file




Notes
-----

For input, use maftools/trinucleotidematrix

Use "sig_extra" to provide parameters to `maftools::extractSignatures`.



Authors
-------

* Thibault Dayris


Code
----

.. code-block:: R

    #!/usr/bin/R

    # __author__ = "Thibault Dayris"
    # __copyright__ = "Copyright 2020, Thibault Dayris"
    # __email__ = "thibault.dayris@gustaveroussy.fr"
    # __license__ = "MIT"

    # Snakemake wrapper for maftools extractSignatures

    base::library(package = "maftools", quietly = TRUE);
    base::library(package = "NMF", quietly = TRUE);

    # Building and running signature extration command line
    maf.tnm <- base::readRDS(
      file = base::as.character(x = snakemake@input[["rds"]])
    );
    sig_extra <- "mat = maf.tnm";
    if ("sig_extra" %in% base::names(snakemake@params)) {
      sig_extra <- base::paste(
        sig_extra, snakemake@params[["sig_extra"]], sep = ", "
      );
    }
    sig_cmd_line <- base::paste0("maftools::extractSignatures(", sig_extra, ")");
    base::message(sig_cmd_line);
    maf.sig <- base::eval(base::parse(text = sig_cmd_line));

    # Building graphics environment command
    png_extra <- base::paste0(
      "filename", "='", base::as.character(x = snakemake@output[["png"]]), "'"
    );
    if ("png_extra" %in% base::names(snakemake@params)) {
      png_extra <- base::paste(
        png_extra, snakemake@params[["png_extra"]], sep = ", "
      );
    }
    png_cmd_line <- base::paste0("grDevices::png(", png_extra, ")");

    # Building plotSignatures command line
    plotsig_extra <- "nmfRes = maf.sig";
    if ("plotsig_extra" %in% base::names(snakemake@params)) {
      plotsig_extra <- base::paste(
        plotsig_extra, snakemake@params[["plotsig_extra"]], sep = ", "
      );
    }
    plotsig_cmd_line <- base::paste0(
      "maftools::plotSignatures(", plotsig_extra, ")"
    );

    # Plotting signatures
    if ("png" %in% base::names(snakemake@output)) {
      base::message(png_cmd_line);
      base::message(plotsig_cmd_line)
      base::eval(base::parse(text = png_cmd_line));
      base::eval(base::parse(text = plotsig_cmd_line));
      dev.off();
    }

    # Saving results
    if ("rds" %in% base::names(snakemake@output)) {
      base::saveRDS(
        file = base::as.character(x = snakemake@output[["rds"]]),
        obj = maf.sig
      );
    }


.. |nl| raw:: html

   <br>
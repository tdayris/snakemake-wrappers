.. _`bio/maftools/oncoplot`:

ONCOPLOT
========

Compute and plot an Oncoplot with `maftools <https://bioconductor.org/packages/release/bioc/html/maftools.html>`_


**URL**: 

Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule test_maftools_oncoplot:
        input:
            rds = "maf.RDS"
        output:
            png = "results/oncoplot.png"
        params:
            non_synonymous = [
                "Missense_Mutation",
                "3_prime_UTR_variant",
                "5_prime_UTR_variant",
                "Splice_Site",
                "Nonsense_Mutation",
                "Frame_Shift_Ins",
                "In_Frame_Del"
            ],
            color_named_vector = [
                "#1a9850",
                "#91cf60",
                "#d9ef8b",
                "#ffffbf",
                "#fee08b",
                "#fc8d59",
                "#d73027"
            ]
        wrapper:
            "0.50.4-2418-g8fefa1e53/bio/maftools/oncoplot"

Note that input, output and log file paths can be chosen freely.

When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``bioconda::bioconductor-maftools==2.6.0``

Input/Output
------------
**Input:**

* A RDS-formatted maftools object

**Output:**

* A PNG-formatted oncoplot




Notes
-----

For input, use maftools/read_maf

Use "oncoplot_extra" to provide parameters to `maftools::oncoplot`,
and "png_extra" to provide extra parameters to `grDevices::png`.



Authors
-------

* Thibault Dayris


Code
----

.. code-block:: R

    #!/usr/bin/R

    # __author__ = "Thibault Dayris"
    # __copyright__ = "Copyright 2020, Thibault Dayris"
    # __email__ = "thibault.dayris@gustaveroussy.fr"
    # __license__ = "MIT"

    # Snakemake wrapper for oncoplots

    base::library(package = "maftools", quietly = TRUE);

    # Building graphics environment command
    png_extra <- base::paste0(
      "filename", "='", base::as.character(x = snakemake@output[["png"]]), "'"
    );
    if ("png_extra" %in% base::names(snakemake@params)) {
      png_extra <- base::paste(
        png_extra, snakemake@params[["png_extra"]], sep = ", "
      );
    }

    png_cmd_line <- base::paste0("grDevices::png(", png_extra, ")");

    # Building trinucleotideMatrix computation command line
    maf_obj <- base::readRDS(
      file = base::as.character(x = snakemake@input[["rds"]])
    );

    vc_nonSyn <- snakemake@params[["non_synonymous"]];
    color_named_vector <- snakemake@params[["color_named_vector"]];
    names(color_named_vector) <- vc_nonSyn;
    oncoplot_extra <- "maf = maf_obj, color = color_named_vector";

    if ("oncoplot_extra" %in% base::names(snakemake@params)) {
      oncoplot_extra <- base::paste(
        oncoplot_extra, snakemake@params[["oncoplot_extra"]], sep = ", "
      );
    }
    oncoplot_cmd_line <- base::paste0(
      "maftools::oncoplot(", oncoplot_extra, ")"
    );

    # Plotting signatures
    if ("png" %in% base::names(snakemake@output)) {
      base::message(png_cmd_line);
      base::message(oncoplot_cmd_line);
      base::eval(base::parse(text = png_cmd_line));
      base::eval(base::parse(text = oncoplot_cmd_line));
      dev.off();
    }


.. |nl| raw:: html

   <br>
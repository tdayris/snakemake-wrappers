.. _`bio/maftools/trinucleotidematrix_mm10`:

TRINUCLEOTIDE MATRIX MM10
=========================

Compute trinucleotide matrix with `maftools <https://bioconductor.org/packages/release/bioc/html/maftools.html>`_ on mm10

**URL**: 

Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule test_maftools_trinucleotidematrix_mm10:
        input:
            rds = "maf.RDS"
        output:
            tsv = "results/matrix.tsv",
            png = "results/matrix.png",
            rds = "results/matrix.RDS"
        params:
            estimate_extra = "nTry=3"
        wrapper:
            "0.50.4-2418-g8fefa1e53/bio/maftools/trinucleotidematrix_mm10"

Note that input, output and log file paths can be chosen freely.

When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``bioconda::bioconductor-maftools==2.6.0``
* ``bioconda::bioconductor-bsgenome.mmusculus.ucsc.mm10==1.4.0``
* ``conda-forge::r-nmf==0.21.0``

Input/Output
------------
**Input:**

* A RDS-formatted maftools object

**Output:**

* An optional RDS-formatted trinucleotide file
* An optional PNG-formatted cophrenic correlation coefficient linegraph




Notes
-----

Use "estimate_extra" to provide parameters to `maftools::estimateSignatures`,
"trinuc_mat_extra", to provide extra parameters to `maftools::trinucleotideMatrix`,
and "png_extra" to provide extra parameters to `grDevices::png`.



Authors
-------

* Thibault Dayris


Code
----

.. code-block:: R

    #!/usr/bin/R

    # __author__ = "Thibault Dayris"
    # __copyright__ = "Copyright 2020, Thibault Dayris"
    # __email__ = "thibault.dayris@gustaveroussy.fr"
    # __license__ = "MIT"

    # Snakemake wrapper for maftools compute trinucleotideMatrix

    # Many libraries are useless. This wrapper will be splitted in at least four
    # of them.
    base::library(package = "maftools", quietly = TRUE);
    base::library(package = "BSgenome.Mmusculus.UCSC.mm10", quietly = TRUE);
    base::library(package = "NMF", quietly = TRUE);

    # Building graphics environment command
    png_extra <- base::paste0(
      "filename", "='", base::as.character(x = snakemake@output[["png"]]), "'"
    );
    if ("png_extra" %in% base::names(snakemake@params)) {
      png_extra <- base::paste(
        png_extra, snakemake@params[["png_extra"]], sep = ", "
      );
    }

    png_cmd_line <- base::paste0("grDevices::png(", png_extra, ")");

    # Building trinucleotideMatrix computation command line
    maf_obj <- base::readRDS(
      file = base::as.character(x = snakemake@input[["rds"]])
    );
    trinuc_mat_extra <- "maf = maf_obj";
    if ("trinuc_mat_extra" %in% base::names(snakemake@params)) {
      trinuc_mat_extra <- base::paste(
        trinuc_mat_extra,
        "ref_genome = 'BSgenome.Mmusculus.UCSC.mm10'",
        snakemake@params[["trinuc_mat_extra"]],
        sep = ", "
      );
    }

    trinucleotide_cmd_line <- base::paste0(
      "maftools::trinucleotideMatrix(", trinuc_mat_extra, ")"
    );

    # Building cophrenic correlation coefficient plot command line
    # The results of trinucleotideMatrix will be stored in a
    # variable called: maf.tnm ; don't be surprised on this poping variable name.
    estimate_extra <- "mat = maf.tnm";
    if ("estimate_extra" %in% base::names(snakemake@params)) {
      estimate_extra <- base::paste(
        estimate_extra, snakemake@params[["estimate_extra"]], sep = ", "
      );
    }
    estimate_cmd_line <- base::paste0(
      "maftools::estimateSignatures(",
      estimate_extra,
      ")"
    );

    # Running command lines on user's request
    base::message(trinucleotide_cmd_line);
    maf.tnm <- base::eval(base::parse(text = trinucleotide_cmd_line));

    if ("tsv" %in% base::names(snakemake@output)) {
      utils::write.table(
        x = maf.tnm,
        file = base::as.character(x = snakemake@output[["tsv"]]),
        sep = "\t",
        quote = FALSE
      );
    }

    if ("png" %in% base::names(snakemake@output)) {
      base::message(png_cmd_line);
      base::eval(base::parse(text = png_cmd_line));

      base::message(estimate_cmd_line);
      base::eval(base::parse(text = estimate_cmd_line));
      dev.off();
    }

    if ("rds" %in% base::names(snakemake@output)) {
      base::saveRDS(
        file = base::as.character(x = snakemake@output[["rds"]]),
        obj = maf.tnm
      );
    }


.. |nl| raw:: html

   <br>
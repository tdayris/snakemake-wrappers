.. _`bio/eacon/cytoscan_process`:

EACON_CYTOSCAN_PROCESS
======================

Perform EaCoN CytoScan processing

**URL**: 

Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule eacon_cytoscan_process:
        input:
            install = "sources",
            cel = "{sample}.CEL",
        output:
            qc_txt = "{sample}/{sample}_2.4.0_{nar}.qc.txt".format(
                sample="{sample}",
                nar=config["params"]["nar"]
            ),
            log = "{sample}/{sample}_2.4.0_{nar}.log".format(
                sample="{sample}",
                nar=config["params"]["nar"]
            ),
            txt = "{sample}/{sample}_CELfile.txt",
            png = "{sample}/{sample}_{arraytype}_{genome}_rawplot.png".format(
                sample="{sample}",
                arraytype=config["params"]["arraytype"],
                genome=config["params"]["genome"]
            ),
            rds = "{sample}/{sample}_{arraytype}_{genome}_processed.RDS".format(
                sample="{sample}",
                genome=config["params"]["genome"],
                arraytype = config["params"]["arraytype"]
            )
        log:
            "logs/EaCoN/{sample}/cytoscan_process.log"
        wrapper:
            "/bio/eacon/cytoscan_process"

Note that input, output and log file paths can be chosen freely.

When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``conda-forge::r-base==4.1.0``
* ``conda-forge::r-devtools==2.4.2``
* ``conda-forge::r-dbi==1.1.1``
* ``conda-forge::r-rsqlite==2.2.5``
* ``conda-forge::r-rmarkdown==2.8``
* ``bioconda::r-eacon==0.3.6``
* ``bioconda::bioconductor-bsgenome==1.60.0``
* ``bioconda::bioconductor-bsgenome.hsapiens.ucsc.hg19==1.4.3``
* ``bioconda::bioconductor-bsgenome.hsapiens.ucsc.hg38==1.4.3``
* ``bioconda::bioconductor-bsgenome.hsapiens.1000genomes.hs37d5==0.99.1``
* ``bioconda::bioconductor-affxparser==1.64.0``
* ``bioconda::bioconductor-biostrings==2.60.0``
* ``bioconda::bioconductor-aroma.light==3.22.0``
* ``bioconda::bioconductor-copynumber==1.32.0``
* ``bioconda::bioconductor-genomicranges==1.44.0``
* ``bioconda::bioconductor-rhdf5==2.36.0``
* ``bioconda::bioconductor-limma==3.48.0``
* ``bioconda::r-sequenza==3.0.0``
* ``bioconda::r-facets==0.6.1``
* ``bioconda::ascat==2.5.2``
* ``conda-forge::r-foreach==1.5.1``
* ``conda-forge::r-dplyr==1.0.6``

Input/Output
------------
**Input:**

* Cytoscan CELL file

**Output:**

* Processing results as a RDS file




Notes
-----

Use extra parameter to pass arguments to CS.Process. Default extra parameter
is: `force=TRUE`

The wildcard `sample` is required to identify sample name.



Authors
-------

* Thibault Dayris


Code
----

.. code-block:: R

    #!/bin/R

    # This is the snakemake wrapper for EaCoN Process

    # __author__ = "Thibault Dayris"
    # __copyright__ = "Copyright 2020, Thibault Dayris"
    # __email__ = "thibault.dayris@gustaveroussy.fr"
    # __license__ = "MIT"

    # Sink the stderr and stdout to the snakemake log file
    # https://stackoverflow.com/a/48173272
    log.file<-file(snakemake@log[[1]],open="wt");
    base::sink(log.file);
    base::sink(log.file,type="message");

    library(package = "EaCoN", quietly = TRUE);

    cel <- base::as.character(x = snakemake@input[["cel"]]);

    # Gather extra parameters
    extra <- ", force=TRUE";
    if ("extra" %in% base::names(snakemake@params)) {
      extra <- base::paste0(
        ", ",
        base::as.character(x = snakemake@params[["extra"]])
      );
    }

    # Get sample name from wildcards
    sample_name <- base::as.character(
      x = snakemake@wildcards["sample"]
    );

    # Build command line
    command <- base::paste0(
      "EaCoN::CS.Process(CEL = cel, samplename = sample_name, ",
      extra,
      ")"
    );
    base::message(command);

    base::eval(
      base::parse(
        text = command
      )
    );

    # Proper syntax to close the connection for the log file
    # but could be optional for Snakemake wrapper
    base::sink(type="message");
    base::sink();


.. |nl| raw:: html

   <br>
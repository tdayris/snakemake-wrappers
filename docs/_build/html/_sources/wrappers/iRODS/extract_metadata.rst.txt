.. _`bio/iRODS/extract_metadata`:

EXTRACT_METADATA
================

Extract a given metadata from a list of yaml files

**URL**: 

Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule test_irods_extract_metadata:
        input:
            "metadata.yaml"
        output:
            "extraction.tsv"
        params:
            attributes = ["SampleID", "Condition", "Strand"]
        wrapper:
            "0.50.4-2418-g8fefa1e53/bio/iRODS/extract_metadata"

Note that input, output and log file paths can be chosen freely.

When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``conda-forge:python=3.8.5``
* ``conda-forge:pandas=1.1.0``
* ``confa-forge:pyyaml=5.3.1``

Input/Output
------------
**Input:**

* One or multiple yaml files from iRODS/yaml

**Output:**

* A single TSV file with the requested meta data




Notes
-----

Parameters:

* Fields (list): A list of fields to keep



Authors
-------

* Thibault Dayris


Code
----

.. code-block:: python

    #!/usr/bin/python3.7
    # -*- coding: utf-8 -*-

    """Snakemake wrapper for iRODS metadata extraction"""

    __author__ = "Thibault Dayris"
    __copyright__ = "Copyright 2020, Thibault Dayris"
    __email__ = "thibault.dayris@gustaveroussy.fr"
    __license__ = "MIT"

    import pandas
    import yaml

    from typing import Any, Dict, List, Union

    # Load complete metadata file
    with open(snakemake.input[0], "r") as yamlin:
        metadatas = yaml.load(yamlin, Loader=yaml.SafeLoader)


    # Extract user defined metadatas
    def getitem(item: Union[str, List[str]],
                indict: Dict[str, Any]) -> Any:
        """
        Return a list of keys from a dictionnary, providing None as default
        missing value
        """
        if isinstance(item, str):
            try:
                return {item: indict[item]['value']}
            except KeyError:
                return None

        results = {}
        for i in item:
            try:
                results[i] = indict[i]["value"]
            except KeyError:
                results[i] = None

        return results


    content = [
        {"Path": k, **getitem(snakemake.params["attributes"], v)}
        for k, v in metadatas.items()
    ]

    # Formatting output as TSV, then saving it.
    pandas.DataFrame(content).to_csv(
        snakemake.output[0],
        sep="\t",
        header=True,
        index=False
    )


.. |nl| raw:: html

   <br>
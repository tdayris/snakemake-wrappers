.. _`bio/iRODS/quant_design`:

IRODS_QUANT_DESIGN
==================

BUild quantification design for IGR Flamingo

**URL**: 

Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule test_quant_design:
        input:
            "collections.tsv"
        output:
            "collections_merged.tsv"
        params:
            common = [
                "species", "protocol", "sampleType",
                "technicalPlatform", "sampleId",
                "datasetId"
            ],
            rename = {
                "Path": "Upstream_file,Downstream_file",
                "datafileName": "Upstream_realname,Downstream_realname"
            }
        wrapper:
            "0.50.4-2418-g8fefa1e53/bio/iRODS/quant_design"

Note that input, output and log file paths can be chosen freely.

When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``conda-forge:python=3.8.5``
* ``conda-forge:pandas=1.1.0``

Input/Output
------------
**Input:**

* A TSV ofrmatted list of file and their metadata. One file per line.

**Output:**

* A TSV formatted design file that suits rna-count-salmon pipeline




Notes
-----

Parameters:

* Column mapping (dict): Mentionned columns will be renamed.
* Common_keys (list): A list of keys used to identify samples.



Authors
-------

* Thibault Dayris


Code
----

.. code-block:: python

    #!/usr/bin/python3.8
    # conding: utf-8

    """
    Build a rna-count-salmon design file from a TSV formatted iRODS metadata
    """

    from snakemake.shell import shell

    import pandas

    #  Load input table
    metadata = pandas.read_csv(
        snakemake.input[0],
        sep="\t",
        header=0,
        index_col=None,
        dtype=str
    )


    # Merge upstream and downstream files if paired dataset
    if "paired" not in snakemake.params.keys() or snakemake.params["paired"]:
        common_keys = snakemake.params["common"]
        aggregate = {
            k: ",".join
            for k in set(metadata.columns) - set(common_keys)
        }

        metadata.groupby(common_keys).agg(aggregate)

    #  Optional column rename to fit rna-count-salmon requirements
    if "rename" in snakemake.params.keys():
        metadata.rename(snakemake.params["rename"])


    # Save output files
    metadata.to_csv(
        snakemake.output[0],
        sep="\t",
        header=True,
        index=True
    )

    shell("sed -i 's/,/\\t/g' {snakemake.output[0]}")


.. |nl| raw:: html

   <br>
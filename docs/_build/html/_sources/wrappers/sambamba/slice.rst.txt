.. _`bio/sambamba/slice`:

SAMBAMBA SLICE
==============

Fast tool for copying a slice of a BAM file. See details `here https://lomereiter.github.io/sambamba/docs/sambamba-slice.html`_

**URL**: 

Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule sambamba_slice:
        input:
            bam="mapped/{sample}.bam",
            bai="mapped/{sample}.bam.bai"
        output:
            "mapped/{sample}.region.bam"
        params:
            region="xx:1-10"  # region to catch (contig:start-end)
        log:
            "logs/sambamba-slice/{sample}.log"
        wrapper:
            "0.50.4-2418-g8fefa1e53/bio/sambamba/slice"

Note that input, output and log file paths can be chosen freely.

When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``sambamba==0.8.0``

Input/Output
------------
**Input:**

* coordinate-sorted and indexed bam file

**Output:**

* new bam file with specific region





Authors
-------

* Jan Forster


Code
----

.. code-block:: python

    __author__ = "Jan Forster"
    __copyright__ = "Copyright 2021, Jan Forster"
    __email__ = "j.forster@dkfz.de"
    __license__ = "MIT"


    import os
    from snakemake.shell import shell

    log = snakemake.log_fmt_shell(stdout=False, stderr=True)
    extra = snakemake.params.get("extra", "")

    mapping = snakemake.input["mapping"]
    if mapping.endswith(("fa", "fasta")) and "fasta" not in extra:
            extra += " --fasta-input"

    regions = snakemake.input.get("regions", "")
    if regions != "" and "regions" not in extra:
        extra += " --regions {}".format(regions)

    shell("sambamba slice {mapping} {extra} > {snakemake.output[0]} {log}")


.. |nl| raw:: html

   <br>
.. _`bio/hmmer/hmmbuild`:

HMMBUILD
========

hmmbuild: construct profile HMM(s) from multiple sequence alignment(s)

**URL**: http://hmmer.org/

Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule hmmbuild_profile:
        input:
            "test-profile.sto"
        output:
            "test-profile.hmm"
        log:
            "logs/test-profile-hmmbuild.log"
        params:
            extra="",
        threads: 4
        wrapper:
            "0.50.4-2418-g8fefa1e53/bio/hmmer/hmmbuild"

Note that input, output and log file paths can be chosen freely.

When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``hmmer=3.2.1``

Input/Output
------------
**Input:**

* sequence alignment file. This must be the only element of the input file list.

**Output:**

* profile hmm. This must be the only element of the output file list



Params
------

* ``extra``: Optional parameters




Notes
-----

"`Challenges in Homology Search: HMMER3 and Convergent Evolution of Coiled-Coil Regions. J. Mistry, R. D. Finn, S. R. Eddy, A. Bateman, M. Punta. Nucleic Acids Research, 41:e121, 2013 <https://doi.org/10.1093/nar/gkt263>`_"



Authors
-------

* N Tessa Pierce


Code
----

.. code-block:: python

    """Snakemake wrapper for hmmbuild"""

    __author__ = "N. Tessa Pierce"
    __copyright__ = "Copyright 2019, N. Tessa Pierce"
    __email__ = "ntpierce@gmail.com"
    __license__ = "MIT"

    from os import path
    from snakemake.shell import shell

    extra = snakemake.params.get("extra", "")

    log = snakemake.log_fmt_shell(stdout=False, stderr=True)

    shell(
        " hmmbuild {extra} --cpu {snakemake.threads} "
        " {snakemake.output} {snakemake.input} {log} "
    )


.. |nl| raw:: html

   <br>
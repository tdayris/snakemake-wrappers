##################
### Flag rules ###
##################

onsuccess:
    shell("touch DONE && rm --force --verbose ON_GOING ERROR")

onerror:
    shell("touch ERROR && rm --force --verbose ON_GOING DONE")

onstart:
    shell("touch ON_GOING && rm --force --verbose ERROR DONE")


include: "rules/000.common.smk"

##################################
### Gather all quality reports ###
##################################


include: "rules/005.multiqc.smk"


#########################################
### Assess quality of each fastq file ###
#########################################


include: "rules/002.fastqc.smk"
include: "rules/003.fastq_screen.smk"


#################################################
### Gather files from iRODS or mounting point ###
#################################################


include: "rules/001.copy.smk"


##########################################################
### Find and load additional files from demultiplexing ###
##########################################################

if stats != default_existing_path:
    include: "rules/004.unzip.smk"
else:
    warn("No Stats.json.zip found. This file is required for DemuxQC")

if all(zipfile != default_existing_path for zipfile in [interop, runinfo, runparams]):
    if stats == default_existing_path:
        include: "rules/004.unzip.smk"
    include: "rules/006.illumina.smk"
else:
    warn(
        "No InterOp.zip found, and/or "
        "no RunInfo.xml.zip found, "
        "and/or no RunParameters.xml.zip found. "
        "These files are required for DemuxQC."
    )


prefix = (
    "output"
    if any(
        zipfile != default_existing_path 
        for zipfile in [interop, runinfo, runparams, stats]
    )
    else "data_output"
)



rule target:
    input:
        f"{prefix}/multiqc.html"

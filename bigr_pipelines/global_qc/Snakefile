##################
### Flag rules ###
##################

onsuccess:
    shell("touch DONE && rm --force --verbose ON_GOING ERROR")

onerror:
    shell("touch ERROR && rm --force --verbose ON_GOING DONE")

onstart:
    shell("touch ON_GOING && rm --force --verbose ERROR DONE")

############################
### Get data information ###
############################da


include: "rules/000.common.smk"


#### Managing supplementary QC
supplementary_design = "./supplementary_design.tsv"
if os.path.isfile(supplementary_design):
    print("./supplementary_design.tsv detected!\n")

    import pandas as pd
    import glob
    
    ### Read supplementary_design.tsv file
    all_data = pd.read_csv(supplementary_design, sep = '\t')
    all_data = all_data.rename(columns={'Sample_Id': 'Library_Name'})
    
    ### For 10X Genomics data (single-cell-RNA-seq and single-cell ATAC-seq):
    
    ## Subset for Single-cell application
    data = all_data[all_data["ApplicationType"].isin(['SingleCell_RNAseq','singleCell_ATACseq','singleCell_ATACseq_coupledScRNA'])]
    isScRNAData=False
    isScATACData=False
    isScRNAATACData=False
    if data.empty:
        print('No single-cell data into the supplementary_design.tsv file!')
    else:
        ## Do a dictionnary:
        ## ApplicationType, then samples (be carreful 1 sample can get several libraries or by splitted by index), 
        ## then GE/TCR/BCR/ATAC (libraries type), then sample_GE/sample_TCR/sample_BCR/sample_ATAC (name of the library), then path to the fastq files, then species.
        
        #get the list of sequenced libraries
        samples=list(data.Library_Name)
        applications=list(data.ApplicationType)
        
        #search the global samples name (manage separate index mode, and specific amplification GE/TCR/BCR/ATAC):
        #for each sample we delete suffix
        #and we save the type of library
        library_type=[]
        for i in  range(0,len(samples),1):
            #separated index mode
            suffixes = ('_1','_2','_3','_4')
            if (samples[i].endswith(suffixes)):
                # recherche s'il existe des mêmes échantillons finissant par  _1 _2 _3 et _4
                sample_without_suffix = samples[i][:-2]
                if ((sample_without_suffix + "_1" in samples) and (sample_without_suffix + "_2" in samples) and (sample_without_suffix + "_3" in samples) and (sample_without_suffix + "_4" in samples)):
                    # si ça existe c'est que c'est du separate index donc on supprime les _1, _2, _3 et _4
                    samples = [sample_without_suffix if (sample_without_suffix in sample) else sample for sample in samples]
            #amplification spécifique GE/TRC/BCR/ATAC
            if (samples[i].endswith('_GE')):
                samples[i] = re.sub('_GE$', '', samples[i])
                library_type.append("GE")
            elif (samples[i].endswith('_TCR')):
                samples[i] = re.sub('_TCR$', '', samples[i])
                library_type.append("TCR")
            elif (samples[i].endswith('_BCR')):
                samples[i] = re.sub('_BCR$', '', samples[i])
                library_type.append("BCR")
            elif (samples[i].endswith('_ATAC')):
                samples[i] = re.sub('_ATAC$', '', samples[i])
                library_type.append("ATAC")
            elif (applications[i] in ['singleCell_ATACseq', 'singleCell_ATACseq_coupledScRNA']):
                library_type.append("ATAC")
            elif (applications[i] in ['SingleCell_RNAseq']):
                library_type.append("GE")
            else:
                library_type.append("GE")
        
        #add the sample name and the library type in the dataframe of data
        data['Library_Type'] = library_type
        data['Samples'] = samples
        
        #go the dictionnary (ApplicationType, then unique sample, then GE/TCR/BCR/ATAC, then sample_GE/TCR/BCR, then path, then species):
        #dic_DATA[ApplicationType][Samples][Library_Type]['Library_Name']=[Library_Name]
        #dic_DATA[ApplicationType][Samples][Library_Type]['Species']=Species
        #dic_DATA[ApplicationType][Samples][Library_Type]['Fastq_Files']=<list of fastq files>
        dic_DATA = {}
        for i in sorted(list(frozenset(data.ApplicationType)), key=str.lower):
            sub_data = data[data["ApplicationType"] == i]
            if not sub_data.empty:
                dic_DATA[i] = {}
                #print("Application : " + i)
                if any(sub_data["ApplicationType"].isin(['SingleCell_RNAseq'])): isScRNAData = True
                if any(sub_data["ApplicationType"].isin(['singleCell_ATACseq'])): isScATACData = True
                if any(sub_data["ApplicationType"].isin(['singleCell_ATACseq_coupledScRNA'])): isScRNAATACData = True
                for j in list(frozenset(sub_data.Samples)):
                    dic_DATA[i][j] = {}
                    if i in 'singleCell_ATACseq_coupledScRNA':
                        #add pair in 'SingleCell_RNAseq' ApplicationType
                        sub_sub_data = data[(data["ApplicationType"].isin([i,'SingleCell_RNAseq'])) & (data["Samples"] == j)]
                        #remove scRNAseq pair in data:
                        data = data[~((data["ApplicationType"].isin([i,'SingleCell_RNAseq'])) & (data["Samples"] == j))]
                    else:
                        sub_sub_data = sub_data[sub_data["Samples"] == j]
                    #print("Sample : " + j)
                    if(len(frozenset(sub_sub_data.Species)) >1) : sys.exit('Only one species is allowed for one sample')
                    for k in list(frozenset(sub_sub_data.Library_Type)):
                        dic_DATA[i][j][k] = {}
                        sub_sub_sub_data = sub_sub_data[sub_sub_data["Library_Type"] == k]
                        dic_DATA[i][j][k]['Library_Name']=sub_sub_sub_data.Library_Name.values.tolist()
                        dic_DATA[i][j][k]['Species']=''.join(set(sub_sub_sub_data.Species)) #''.join() allow to convert set() type in string.
                        #get path of fastq files for this sample
                        dic_DATA[i][j][k]['Fastq_Files'] = [ os.path.abspath(l) for l in sum([ glob.glob('./*input/**/' + l +'_S[0-9]*_R[1-3]_*.f*q.gz',  recursive=True) for l in dic_DATA[i][j][k]['Library_Name']], [])]
                        #print("Library : " + k)
                        #print("Library Name : " + ",".join(dic_DATA[i][j][k]['Library_Name']))
                        #print("Species : " + dic_DATA[i][j][k]['Species'])
                        #print("Fastq Files : " + ",".join(dic_DATA[i][j][k]['Fastq_Files']) + "\n")


################################
### Get pipeline information ###
################################


PIPELINE_FOLDER = workflow.snakefile
PIPELINE_FOLDER = PIPELINE_FOLDER.replace("/Snakefile", "")


##################################
### Gather all quality reports ###
##################################


include: "rules/005.multiqc.smk"


#########################################
### Assess quality of each fastq file ###
#########################################


include: "rules/002.fastqc.smk"
include: "rules/003.fastq_screen.smk"


#################################################
### Gather files from iRODS or mounting point ###
#################################################


include: "rules/001.copy.smk"


##########################################################
### Find and load additional files from demultiplexing ###
##########################################################


if stats != default_existing_path:
    include: "rules/004.unzip.smk"
else:
    warn("No Stats.json.zip found. This file is required for DemuxQC")

if all(zipfile != default_existing_path for zipfile in [interop, runinfo, runparams]):
    include: "rules/006.illumina.smk"
else:
    warn("No InterOp.zip found, and/or no RunInfo.xml.zip found, and/or "
        "no RunParameters.xml.zip found. These files are required for DemuxQC.")


#####################################################
### Gather 10XGenomics CellRanger quality reports ###
#####################################################


if isScRNAData:
    include: "rules/007.csv_cellranger_multi_RNA.smk"
    include: "rules/008.cellranger_multi_RNA.smk"
    include: "rules/009.concat_cellranger_multi_RNA.smk"


if isScATACData:
    include: "rules/008.cellranger_atac_ATAC.smk"
    include: "rules/009.concat_cellranger_atac_ATAC.smk"


if isScRNAATACData:
    include: "rules/007.csv_cellranger_arc_RNA_ATAC.smk"
    include: "rules/008.cellranger_arc_RNA_ATAC.smk"
    include: "rules/009.concat_cellranger_arc_RNA_ATAC.smk"

###########
### End ###
###########


prefix = (
    "output"
    if any(
        zipfile != default_existing_path 
        for zipfile in [interop, runinfo, runparams, stats]
    )
    else "data_output"
)

rule target:
    input:
        f"{prefix}/multiqc.html"